swagger: '2.0'
schemes:
  - https
host: 'localhost:8181'
basePath: /
x-apigee:
  rootRules:
    - node: PostFlow
      attr:
        name: PostFlow
      content:
        - node: Request
          content: ""
        - node: Response
          content: ""
    - node: PreFlow
      attr:
        name: PreFlow
      content:
        - node: Response
          content: ""
        - node: Request
          content:
            - node: Step
              content:
                - node: Name
                  content: rate-limiter
    - node: DefaultFaultRule
      attr:
        name: default-rule
      content:
        - node: Step
          content:
            - node: Name
              content: add-cors
        - node: AlwaysEnforce
          content: true
    - node: HTTPProxyConnection
      content:
        - node: BasePath
          content: /booking
        - node: Properties
          content: ""
        - node: VirtualHost
          content: secure
    - node: RouteRule
      attr:
        name: no-route
      content:
        - node: Condition
          content: request.verb == "OPTIONS"
    - node: RouteRule
      attr:
        name: default
      content:
        - node: TargetEndpoint
          content: default
    - node: FaultRules
      content: ""
  additionalFlows:
    - node: Flow
      attr:
        name: pre-flight
      content:
        - node: Request
          content: ""
        - node: Response
          content:
            - node: Step
              content:
                - node: Name
                  content: add-cors
        - node: Condition
          content: request.verb == "OPTIONS"
    - node: Flow
      attr:
        name: private-by-default
      content:
        - node: Description
          content: Make any non-listed flow private
        - node: Response
          content: ""
        - node: Request
          content:
            - node: Step
              content:
                - node: Name
                  content: deny-external
info:
  description: |
    **Welcome to the On the dot Booking API Reference documentation.**

    This documentation is currently in Beta and will be updated over the next few months. For assistance with using the APIs, please contact our Partner team.

    **All APIs require an `Authorization` header.**

    You will need to register with this site to receive a token which is used in the request headers. 

    # Quick Start

    # Core Concepts

    An order comprises the following parts:

    * **job**: a parcel to be collected and delivered.  A job has one collection stop and one delivery stop, together with timeslots (explained below).  An order can contain multiple jobs.

    * **stop**: a geographical location.  Each job has one collection stop and one delivery stop.

    * **timeslot**: a period of time where collection and delivery should happen.  A timeslot defines a start time and an end time.  The user can either specify the timeslot values in request, or get a timeslot ID from OTD and use it.

    ## Quick Start

    Here is an example request to create an order.

    ```
    POST https://TODO/v2/accounts/myaccount/orders

    Request:

    {
      "id": "myorder",
      "metadata": {
        "serviceType": "asap"
      },
      "jobs": [
        {
          "id": "job0",
          "metadata": {
            "journeyType": "delivery"
          },
          "items": [
            {
              "id": "itemgroup0:item0",
              "quantity": 1
            }
          ],
          "collection": {
            "stopId": "stop0"
          },
          "delivery": {
            "stopId": "stop1"
          },
          "timeslot": {
            "collection": {
              "from": "2019-01-02T13:30:00.000Z",
              "to": "2019-01-02T14:30:00.000Z"
            },
            "delivery": {
              "from": "2019-01-02T18:30:00.000Z",
              "to": "2019-01-02T19:30:00.000Z"
            }
          }
        }
      ],
      "stops": [
        {
          "id": "stop0",
          "place": {
            "address": {
              "country": "GBR",
              "town": "London",
              "streets": [
                "Royal Opera House",
                "Bow Street"
              ],
              "postcode": "WC2E 9DD"
            }
          }
        },
        {
          "id": "stop1",
          "place": {
            "address": {
              "country": "GBR",
              "town": "London",
              "streets": [
                "English National Opera",
                "St Martin's Lane"
              ],
              "postcode": "WC2N 4ES"
            }
          }
        }
      ]
    }
    ```

    And here is an example response when getting an order (or the response of creating an order)

    ```
    GET https://TODO/v2/accounts/myaccount/orders/myorder

    Response:

    {
      "id": "myorder",
      "metadata": {
        "vehicleType": "bicycle",
        "serviceType": "asap",
        "trackingUrl": "https://trackmydriver-prod.lastmilelink.eu/myaccount::myorder?token=7%2FI9ZlUZ7rnNBUkKORI2fGrPdEIaMV%2BNkrYbLFSQQW4%3D"
      },
      "jobs": [
        {
          "id": "job0",
          "metadata": {
            "journeyType": "delivery"
          },
          "items": [
            {
              "id": "itemgroup0:item0",
              "quantity": 1
            }
          ],
          "collection": {
            "stopId": "stop0"
          },
          "delivery": {
            "stopId": "stop1"
          },
          "timeslot": {
            "collection": {
              "from": "2019-01-02T13:30:00.000Z",
              "to": "2019-01-02T14:30:00.000Z"
            },
            "delivery": {
              "from": "2019-01-02T18:30:00.000Z",
              "to": "2019-01-02T19:30:00.000Z"
            }
          },
          "status": {
            "progressStatus": {
              "status": "created",
              "updatedAt": "2019-01-02T13:30:00.048Z"
            }
          }
        }
      ],
      "stops": [
        {
          "id": "stop0",
          "place": {
            "position": {
              "coordinates": {
                "longitude": -0.1265741,
                "latitude": 51.5136986
              }
            },
            "address": {
              "country": "GBR",
              "town": "London",
              "streets": [
                "Royal Opera House",
                "Bow Street"
              ],
              "postcode": "WC2E 9DD"
            }
          }
        },
        {
          "id": "stop1",
          "place": {
            "id": "place2",
            "position": {
              "coordinates": {
                "longitude": -0.1288661,
                "latitude": 51.5098553
              }
            },
            "address": {
              "country": "GBR",
              "town": "London",
              "streets": [
                "English National Opera",
                "St Martin's Lane"
              ],
              "postcode": "WC2N 4ES"
            }
          }
        }
      ],
      "status": {
        "status": "created",
        "updatedAt": "2019-01-02T13:30:00.048Z"
      },
      "createdAt": "2019-01-02T13:30:00.048Z",
      "updatedAt": "2019-01-02T13:30:00.048Z"
    }
    ```

    ## Before You Start

    Please contact OTD support to set up the following:

    * Account
    * Service types
    * Places (optional)

    # Job Journey Type

    Each job must have a `<order>.<job>.metadata.journeyType` defined.  The valid values are:

    | `journeyType` values | Meaning |
    | -- | -- |
    | `delivery` | The job is a normal delivery job (usually from store to home) |
    | `return` | The job is a return of some products (usually from home to store) |

    > **Note**: regardless of `journeyType`, `collection` is always the pick up location, and `delivery` is always the drop off location.

    # Service Type

    A service type defines a set of pre-agreed constraints for orders.  A new user must have the service type set up before they can create orders.

    Currently supported service types: `timeslot`, `asap`, `return`, `2hour`, `3hour`, `4hour`, `sameday`, `2hour-later`, `4hour-later`.

    # Place

    A stop must contain a valid place, which represents a physical location.

    The user can either contact OTD support to set up places for them (so they can use a place ID when creating orders), or use a valid address when creating orders.

    # Status

    Both order and job have status.  They are updated with realtime events.

    ## Job Status

    Here is an example job status object.

    ```
    "status": {
      "progressStatus": {
        "status": "allocated",
        "updatedAt": "2019-01-02T13:18:53.087Z"
      },
      "courierStatus": {
        "location": {
          "longitude": 0.1701,
          "latitude": 51.5701
        },
        "updatedAt": "2019-01-02T13:18:53.087Z"
      },
      "incidents": [
        {
          "id": "85ad3dd6-05d3-4023-b1e6-74042b7ff138",
          "status": "created",
          "reason": {
            "code": "1B",
            "description": "Partner Cancellation"
          },
          "impact": {
            "code": "7H",
            "description": "Unable to Fulfil Order"
          },
          "createdAt": "2019-01-02T13:18:53.087Z",
          "updatedAt": "2019-01-02T13:18:53.087Z"
        }
      ]
    }
    ```

    Job status is further divided into the following types.

    ### Progress Status

    Example:
    ```
    "progressStatus": {
      "status": "allocated",
      "updatedAt": "2019-01-02T13:18:53.087Z"
    }
    ```

    Status representing a job's execution state.

    | Status | Meaning |
    | ------ | ------- |
    | `created` | The job was created. |
    | `allocated` | A courier has accepted the job. |
    | `arrived_at_collection` | Courier has arrived at the collection address. |
    | `collected` | Courier has collected the item. |
    | `arrived_at_delivery` | Courier has arrived at the delivery address. |
    | `delivered` | Courier has delivered the item. |
    | `cancelled` | The job has been cancelled (this means the whole order has been cancelled too). |
    | `returned_to_depot` | Courier failed to deliver the item and it has been returned to depot. |
    | `offline` | The job is offline (this means an internal error, please contact OTD support). |

    ### Courier Status

    Example:
    ```
    "courierStatus": {
      "location": {
        "longitude": 0.1701,
        "latitude": 51.5701
      },
      "updatedAt": "2019-01-02T13:18:53.087Z"
    }
    ```

    This gives the realtime courier location data.

    ### Incidents

    Example:
    ```
    "incidents": [
      {
        "id": "85ad3dd6-05d3-4023-b1e6-74042b7ff138",
        "status": "created",
        "reason": {
          "code": "1B",
          "description": "Partner Cancellation"
        },
        "impact": {
          "code": "7H",
          "description": "Unable to Fulfil Order"
        },
        "createdAt": "2019-01-02T13:18:53.087Z",
        "updatedAt": "2019-01-02T13:18:53.087Z"
      }
    ]
    ```

    Incidents represents a list of exceptions that happened during the job's lifetime.

    | Status | Meaning |
    | ------ | ------- |
    | `created` | An incident was created for the job. |
    | `deleted` | An incident was deleted from the job. |

    TODO: incident codes and meaning

    ## Order Status

    Order status is an aggregation of job statuses.

    Example:

    | Job 1 Status | Job 2 Status | Order Status |
    | ----- | ----- | ----- |
    | `created` | `created` | `created` |
    | `allocated` | `created` | `in_progress` |
    | `delivered` | `allocated` | `in_progress` |
    | `delivered` | `offline` | `in_progress`, because `off_line` is not considered completed |
    | `allocated` | `returned_to_depot` | `in_progress` |
    | `delivered` | `returned_to_depot` | `completed` |
    | `delivered` | `delivered` | `completed` |
    | `cancelled` | `cancelled` | `cancelled` |
    | `delivered` | `cancelled` | This never happens |
    | `returned_to_depot` | `cancelled` | `cancelled`, this can only happen if customer cancelled the order and then returned to depot was called. |

    # ETA

    Example:
    ```
    {
      "id": "myorder",
      "jobs": [
        {
          "id": "job0",
          //...
          "eta": {
            "collection": {
              "courierId": "mycourier",
              "time": "2019-01-30T15:16:17.540Z"
            },
            "delivery": {
              "courierId": "mycourier",
              "time": "2019-01-30T15:19:27.546Z"
            }
          }
        }
      ],
      //...
    }
    ```

    `collection` shows ETA to collection, `delivery` shows ETA to delivery.

    Note `collection` is only available after the job has entered state `allocated`, and `delivery` is only available after `collected`.

    ##Amend and Cancellation

    Orders and jobs can be amended after they are created, subject to certain conditions:

    * Job's stop and timing details cannot be amended after it has entered `allocated` state.
    * Job's item details cannot be amended after it has entered `collected` state.

    Orders can be cancelled if and only if all of the jobs are in `created` state.

    # Search

    Orders can be searched using the search API.  The API supports paging using a `length` and `offset` concept.

    Please see API for details.

    # Error Codes

    All error messages have the following format.

    ```
    {
      "code": "booking:0203",
      "description": "job not found",
      "message": "more details"
    }
    ```

    A list of all error codes and HTTP response code.
          | full code | http code | description |
    | --- | --- | --- |
    | default:0000 | 500 | Unknown |
    | default:0001 | 400 | Invalid request |
    | default:0002 | 404 | Not found |
    | booking:0101 | 500 | geocode service failed |
    | booking:0102 | 500 | place service failed |
    | booking:0103 | 500 | SLA service failed |
    | booking:0104 | 500 | job service failed |
    | booking:0105 | 500 | chronos service failed |
    | booking:0106 | 500 | capacity service failed |
    | booking:0107 | 500 | account service failed |
    | booking:0108 | 500 | tracking service failed |
    | booking:0108 | 500 | capacity service (zone API) failed |
    | booking:0202 | 422 | invalid place. please create a support ticket to configure your account with otd |
    | booking:0203 | 422 | invalid SLA. please create a support ticket to configure your account with otd |
    | booking:0206 | 422 | invalid timeslot specified |
    | booking:0207 | 422 | invalid capacity. please create a support ticket to configure your account with otd |
    | booking:0208 | 422 | invalid account. please create a support ticket to configure your account with otd |
    | booking:0210 | 422 | invalid zone. please create a support ticket to configure your account with otd |
    | booking:0301 | 422 | order not cancellable |
    | booking:0302 | 409 | concurrent modification |
    | booking:0303 | 500 | failed to delete job |
    | booking:0304 | 400 | order not amendable |
    | booking:02XX | 500 | unknown server error with On the dot services |
    | booking:401 | 401 | Invalid authentication credentials |
    | booking:403 | 403 | Permission denied to access resource |

      # Advanced Features

      ## Timeslots

      > Note this feature only works if you have places configured in OTD.  Please contact OTD support to set them up.

      Users might want to get a list of available timeslots for their delivery, and then choose the ones they like.

      This is implemented by a timeslot API.  Here is an example request

      ```
      POST https://TODO/v2/accounts/myaccount/timeslots

      {
        "serviceType": "timeslot",
        "collection": {
          "id": "myplace"
        },
        "delivery": {
          "address": {
            "streets": [
              "Royal Opera House",
              "Bow Street"
            ],
            "town": "London",
            "country": "GBR",
            "postcode": "WC2E 9DD"
          }
        },
        "packageReadyAt": "2019-01-30T16:25:00.000Z",
        "additionalNoOfDays": 0 // TODO this is not yet changed, since we don't have time to implement it
      }
      ```

      And here is an example response

      ```
      {
        "Timeslot": {
          "2019-01-30": [
          {
            "id": "YTZkOWNjN2QtMWJkNS00MDkyLWFiZGItNGM4YmM0OWJkMDBlfjRwdkVNMEdrY3p3RDdQbWNCYWJOd2t0ck5ua2FtMX5FQzJBKzRQSH5XQzJFKzlERH4xNTQ4ODYzNTEzfjE1NDg4NjQwNjB+MH4wfjQuOTEyMDAwfnRpbWVzbG90fmZhbHNlfmZhbHNl",
            "collectionSlot": {
              "collectFrom": "2019-01-30T16:25:00.619Z",
              "collectBy": "2019-01-30T16:25:00.619Z"
            },
            "deliverySlot": {
              "deliverFrom": "2019-01-30T16:40:00.619Z",
              "deliverBy": "2019-01-30T16:40:00.619Z"
            },
            "slotExpiresAt": "2019-01-30T16:01:00.000Z"
          },
          {
            "id": "YTZkOWNjN2QtMWJkNS00MDkyLWFiZGItNGM4YmM0OWJkMDBlfjhPeGtZNXFuaHdlWExwT2hkMzVNTFJIdjJMbm9OMX5FQzJBKzRQSH5XQzJFKzlERH4xNTQ4ODYzNTEzfjE1NDg4NjQwNjB+MH4wfjQuOTEyMDAwfnRpbWVzbG90fmZhbHNlfmZhbHNl",
            "collectionSlot": {
              "collectFrom": "2019-01-30T16:30:00.619Z",
              "collectBy": "2019-01-30T16:30:00.619Z"
            },
            "deliverySlot": {
              "deliverFrom": "2019-01-30T16:45:00.619Z",
              "deliverBy": "2019-01-30T16:45:00.619Z"
            },
            "slotExpiresAt": "2019-01-30T16:01:00.000Z"
          },
          //...
          ]
        }
      }
      ```

      The user should use the `id` value in create order API as `<order>.<job>.timeslot.id`.

      > Note please ensure to use the same addresses for timeslot.

      ## Helpers

      Jobs can have helper jobs attached to them.  A helper is a new job that is associated with a target item group/job, and shares the the same parameters (timing, stops, etc).

      Helper jobs are created by specifying in the parent job the number of helpers required.

      The limit of helpers per job is 10.

      > Note helper jobs cannot be amended

      ### Helpers and Status

      Helper jobs have the same set of statuses as a normal job, but they **do not** contribute to order status.
  version: 2
  title: Booking Service
  termsOfService: 'https://www.onthedot.com/terms-and-conditions'
  contact:
    email: hello@onthedot.co.uk
x-logo:
  url: |
    https://lastmilelink.com/wp-content/uploads/2016/07/last-mile-link-technologies-logo-grey.svg
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Timeslot
    description: Everything about Timeslot
x-tagGroups:
  - name: Timeslot
    tags:
      - Timeslot
  - name: Order V2
    tags:
      - orderV2
securityDefinitions:
  api_key:
    description: |
      API calls must provide `Authorization` header.
    type: apiKey
    name: Authorization
    in: header
x-servers:
  - url: '/localhost:8181'
    description: Default server
paths:
  '/v2/accounts/{accountId}/timeslots':
    post:
      tags:
        - Timeslot
      summary: Get available timeslots for a booking
      description: |
        This API returns a list of available timeslots. Allows the options to be 
        presented to an end-user for selection.
      operationId: getTimeslotIDs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: body
          name: body
          description: Timeslot parameters
          required: true
          schema:
            $ref: '#/definitions/TimeslotReq'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TimeslotRes'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  '/v2/accounts/{accountId}/orders':
    post:
      tags:
        - orderV2
      summary: Create order
      description: |
        This API creates an order with the specified ID.

        This API allows the caller to override all values (timeslots, stops) with their own values.

        If the caller sends only timeslot ID or place ID, then the relevant services will be called to get the details.
      operationId: createOrderV2
      x-apigee:
        included: true
        rootRules:
          - node: Request
            content:
              - node: Step
                content:
                  - node: Name
                    content: platform-auth
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: body
          name: body
          description: Order object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/OrderV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Conflict
  '/v2/accounts/{accountId}/orders/{orderId}':
    get:
      tags:
        - orderV2
      summary: Get order
      description: |
        This API gets order with account ID and order ID.
      operationId: getOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: path
          name: orderId
          type: string
          maxLength: 140
          description: order ID
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '404':
          description: Not found
        '401':
          description: Unauthorized
  '/v2/accounts/{accountId}/orders/search':
    post:
      tags:
        - orderV2
      summary: Search order
      description: |
        This API returns a list of orders based on the provided search criteria.

        `createdAt`, `collectedBy` and `deliveredBy` are time ranges.  If there are multiple jobs in the order, then any job satisfying these will cause the order to be returned.

        `coordinates` can be any point on Earth.

        Paging is supported.  See request and response for details.
      operationId: searchOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: body
          name: body
          description: The search order parameters
          required: true
          schema:
            $ref: '#/definitions/SearchOrderV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SearchOrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  '/v2/accounts/{accountId}/orders/{orderId}/cancel':
    put:
      tags:
        - orderV2
      summary: Cancel order
      description: |
        This API can be used to cancel an order, under the following conditions:

        1. The order exists.

        2. None of the jobs of the order have the status `collected` yet.

        Once an order is cancelled, it cannot be re-created or un-cancelled.  You will need to create a new order in this case.
      operationId: cancelOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: path
          name: orderId
          type: string
          maxLength: 140
          description: order ID
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/v2/accounts/{accountId}/orders/{orderId}/amend':
    put:
      tags:
        - orderV2
      summary: Amend order
      description: |
        This API amends an order and updates the corresponding jobs in COSMO.

        The following rules apply:

        1. The order must already exist.

        2. For each job of the order:

        1) If only `items` is updated, then the job's progress status must be one of `created`, `allocated`, `arrived_at_collection` (i.e., amending is not allowed after collection).

        2) If any other field is changed (including `timeslot`, `metadata`), then the job's progress status must be `created` (i.e., amending is not allowed after allocation).

        3) Collection and delivery stop IDs cannot be changed.

        4) If stops corresponding to the job are changed, then rule 2) applies.

        > Note `customData` uses incremental update.  All other fields are full-replacement update.
      operationId: amendOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: path
          name: orderId
          type: string
          maxLength: 140
          description: order ID
          required: true
        - in: body
          name: body
          description: The cancel order parameters
          required: true
          schema:
            $ref: '#/definitions/AmendOrderV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
definitions:
  # Order V2 - API definition
  TimeslotReq:
    description: Timeslot request
    type: object
    required:
      - serviceType
      - collection
      - delivery
      - packageReadyAt
    properties:
      serviceType:
        $ref: '#/definitions/ServiceType'
      collection:
        description: |
          The collection place ID or address.
        $ref: '#/definitions/TimeslotPlace'
      delivery:
        description: |
          The delivery place ID or address.
        $ref: '#/definitions/TimeslotPlace'
      packageReadyAt:
        $ref: '#/definitions/PackageReadyAt'
      dates:
        description: |
          Used to override the opening/closing time of store for special dates.

          Format:
          ```
          {
            "<date>": {
              "openTime": "<time>",
              "closeTime": "<time>"
            },
            ...
          }
          ```
          where

          * `<date>` must have format `yyyy-MM-dd`, e.g., `2017-04-21`
          * `<time>` must have format `HH:mm`, e.g., `22:32`
        example:
          "2018-08-09":
            openTime: "12:00"
            closeTime: "17:00"
          "2018-08-10":
            openTime: "12:00"
            closeTime: "16:00"
  TimeslotPlace:
    description: |
      Place details in Timeslot request.  Must set one of `id` and `address`, but not both.
    type: object
    properties:
      id:
        description: |
          If you pass a Place ID it must be already configured by On the dot.
        type: string
        example: "myplaceID"
      address:
        description: |
          Address of the place.
        $ref: '#/definitions/Address'
  TimeslotRes:
    description: |
      Timeslots response.
    type: object
    properties:
      timeslots:
        description: |
          'Timeslots' details.


          Format:

          ```
          "timeslots": {
              {
                "<date>": [
                  {
                    "id": "<timeslot_id>",
                    "collectionSlot": {
                      "collectFrom": "<timestamp>",
                      "collectBy": "<timestamp>"
                    },
                    "deliverySlot": {
                      "deliverFrom": "<timestamp>",
                      "deliverBy": "<timestamp>"
                    },
                    "slotExpiresAt": "<timestamp>"
                  },
                  ...
                ],
                ...
              }
          }
          ```

          where


          * `<date>` has format `yyyy-MM-dd`, e.g., `2017-04-21`

          * `<timestamp>` has format `2006-01-02T15:04:05.999Z` in Zulu timezone
          only

          * `<timeslot_id>` is a string that should be used when creating orders
        type: object
    example:
      timeslots:
        '2018-01-11':
          - id: NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBifkxwNGQ1ZFd6Y1B3Tnd2R1NtMWQxUDFGYVl3WW1ZTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw
            collectionSlot:
              collectFrom: "2018-01-11T18:35:00.000Z"
              collectBy: "2018-01-11T18:35:00.000Z"
            deliverySlot:
              deliverFrom: "2018-01-11T18:45:00.000Z"
              deliverBy: "2018-01-11T18:45:00.000Z"
            slotExpiresAt: "2018-01-11T18:15:00.000Z"
          - id: "NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBiflY5R2V5ZUF6aHhCQUJ3b0Y1N3c1MVpoOWRFOTNhTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw"
            collectionSlot:
              collectFrom: "2018-01-11T18:40:00.000Z"
              collectBy: "2018-01-11T18:40:00.000Z"
            deliverySlot:
              deliverFrom: "2018-01-11T18:50:00.000Z"
              deliverBy: "2018-01-11T18:50:00.000Z"
            slotExpiresAt: "2018-01-11T18:15:00.000Z"
          - id: "NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBifmtKYXAzcEpwSWJyd3JRcmZLZzVLbkJDeVlSeU1PTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw"
            collectionSlot:
              collectFrom: "2018-01-11T18:45:00.000Z"
              collectBy: "2018-01-11T18:45:00.000Z"
            deliverySlot:
              deliverFrom: "2018-01-11T18:55:00.000Z"
              deliverBy: "2018-01-11T18:55:00.000Z"
            slotExpiresAt: "2018-01-11T18:15:00.000Z"

  OrderV2:
    description: An order object
    type: object
    required:
      - id
      - metadata
      - jobs
      - stops
    properties:
      id:
        $ref: '#/definitions/OrderId'
      metadata:
        $ref: '#/definitions/OrderMetadataV2'
      customData:
        $ref: '#/definitions/CustomData'
      contact:
        $ref: '#/definitions/Contact'
      notification:
        $ref: '#/definitions/Notification'
      jobs:
        type: array
        items:
          $ref: '#/definitions/JobV2'
      stops:
        type: array
        items:
          $ref: '#/definitions/Stop'
      instructions:
        type: string
        maxLength: 500
        example: "Fragile items, be careful"
  OrderResV2:
    description: An order object
    type: object
    required:
      - id
      - metadata
      - jobs
      - stops
    properties:
      id:
        $ref: '#/definitions/OrderId'
      accountId:
        $ref: '#/definitions/AccountId'
      metadata:
        $ref: '#/definitions/OrderMetadataResV2'
      customData:
        $ref: '#/definitions/CustomData'
      contact:
        $ref: '#/definitions/Contact'
      notification:
        $ref: '#/definitions/Notification'
      jobs:
        type: array
        items:
          $ref: '#/definitions/JobResV2'
      stops:
        type: array
        items:
          $ref: '#/definitions/Stop'
      instructions:
        type: string
        example: "Fragile items, be careful"
      status:
        type: object
        properties:
          status:
            $ref: '#/definitions/OrderStatusV2'
          updatedAt:
            $ref: '#/definitions/Timestamp'
      createdAt:
        $ref: '#/definitions/Timestamp'
      updatedAt:
        $ref: '#/definitions/Timestamp'
  SearchOrderV2:
    description: |
      All fields are optional, except `sortDirection`.

      The different criteria are joined by "and" logic except in `places` where the condition can be explicitely specified (AND/OR).
    type: object
    required:
      - sortDirection
    properties:
      clientRefId:
        description: |
          Search by client ref ID.  If this parameter is set, then only the following parameters can be set:

          * `orderStatus`
          * `JobStatus`
          * `sortDirection`
        type: string
        example: "myclientrefid1"
      createdAt:
        description: |
          The time when the order was created.
        $ref: '#/definitions/SearchParamTimeRange'
      collectedBy:
        $ref: '#/definitions/SearchParamTimeRange'
      deliveredBy:
        $ref: '#/definitions/SearchParamTimeRange'
      orderStatus:
        description: Order status
        type: array
        items:
          type: string
          maxLength: 140
          example: completed
      jobStatus:
        description: Job status
        type: array
        items:
          type: string
          maxLength: 140
          example: delivered
      sortDirection:
        description: |
          Results are sorted by `createdAt`.

          This field controls whether the results are sorted in ascending or descending order.
        type: string
        enum:
          - asc
          - desc
        example: "asc"
      offset:
        description: |
          The offset for paging.

          Should use the value in the previous response.
        type: integer
        format: int64
        example: 100
      length:
        description: |
          The number of orders to return.

          Must be between 1 and 1000.

          Default to 1000.
        type: integer
        format: int64
        example: 100
  SearchOrderResV2:
    description: Search response object
    type: object
    required:
      - offset
    properties:
      orders:
        type: array
        items:
          $ref: '#/definitions/OrderResV2'
      failures:
        type: array
        items:
          type: string
        example: ["Failed to find order0", "Failed to find order1"]
      offset:
        type: integer
        format: int64
        example: 5
  AmendOrderV2:
    description: An amend order object
    type: object
    required:
      - id
    properties:
      customData:
        $ref: '#/definitions/CustomData'
      contact:
        $ref: '#/definitions/Contact'
      notification:
        $ref: '#/definitions/Notification'
      jobs:
        type: array
        items:
          $ref: '#/definitions/AmendJobV2'
      stops:
        type: array
        items:
          $ref: '#/definitions/AmendStopV2'
      instructions:
        type: string
        maxLength: 500
        example: "Fragile items, be careful"
  AmendJobV2:
    description: An amend job object
    type: object
    required:
      - id
    properties:
      id:
        $ref: '#/definitions/JobId'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
      timeslot:
        $ref: '#/definitions/TimeslotV2'
  AmendStopV2:
    description: An amend stop object
    type: object
    required:
      - id
    properties:
      id:
        type: string
        maxLength: 140
        example: "mystop"
      contact:
        $ref: '#/definitions/Contact'
      place:
        $ref: '#/definitions/AmendPlaceV2'
  AmendPlaceV2:
    type: object
    description: An amend place object
    required:
      - address
    properties:
      address:
        $ref: '#/definitions/Address'
  OrderStatusV2:
    description: |
      Order's status.

      Note this is different from job status, though they're related.  See beginning of doc for details.
    type: string
    enum:
      - incomplete
      - created
      - completed
  OrderMetadataV2:
    type: object
    required:
      - serviceType
    properties:
      clientRefId:
        description: |
          Client reference ID.  This field can be reused for multiple orders.

          This field is searchable.  This field is not amendable.
        type: string
        example: "myclientrefid"
      serviceType:
        $ref: '#/definitions/ServiceType'
      isTest:
        description: |
          Mark the order as a test order.

          The default value is dependent on the account state.

          | Account State | `isTest` |
          | ------------- | -------- |
          | `live` | `false` |
          | `onboarding | `true` |
          | `test` | `true` |

          Note setting this field to `false` is the same as setting to `null`.
        type: boolean
        example: true
  OrderMetadataResV2:
    type: object
    required:
      - serviceType
    properties:
      sector:
        description: |
          The sector of the order.
        type: string
        example: "Local"
      clientRefId:
        description: |
          Client reference ID.  This field can be reused for multiple orders.

          This field is searchable.  This field is not amendable.
        type: string
        example: "myclientrefid"
      serviceType:
        $ref: '#/definitions/ServiceType'
      isTest:
        description: |
          Mark the order as a test order.

          The default value is dependent on the account state.

          | Account State | `isTest` |
          | ------------- | -------- |
          | `live` | `false` |
          | `onboarding | `true` |
          | `test` | `true` |
        type: boolean
        example: true
      trackingUrl:
        description: |
          User can track an order once after parcels collected and before
          delivery.
        type: string
        example: "https://trackservice/myorder"
  JobV2:
    type: object
    required:
      - id
      - metadata
      - items
      - timeslot
      - collection
      - delivery
    properties:
      id:
        $ref: '#/definitions/JobId'
      metadata:
        $ref: '#/definitions/JobMetadata'
      requires:
        $ref: '#/definitions/Requires'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
      timeslot:
        $ref: '#/definitions/TimeslotV2'
      collection:
        $ref: '#/definitions/JobStop'
      delivery:
        $ref: '#/definitions/JobStop'
  JobResV2:
    type: object
    required:
      - id
      - metadata
      - items
      - timeslot
      - collection
      - delivery
    properties:
      id:
        $ref: '#/definitions/JobId'
      metadata:
        $ref: '#/definitions/JobMetadata'
      requires:
        $ref: '#/definitions/Requires'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
      timeslot:
        $ref: '#/definitions/TimeslotV2'
      collection:
        $ref: '#/definitions/JobStop'
      delivery:
        $ref: '#/definitions/JobStop'
      status:
        $ref: '#/definitions/JobStatus'
      eta:
        $ref: '#/definitions/Eta'
  JobStop:
    type: object
    required:
      - stopId
    properties:
      stopId:
        type: string
      instructions:
        type: string
  JobMetadata:
    type: object
    required:
      - journeyType
    properties:
      journeyType:
        $ref: '#/definitions/JourneyType'
  TimeslotV2:
    type: object
    description: |
      Must specify either `id` or `collection` + `delivery`, but not both.
    properties:
      id:
        type: string
        example: "NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBifmtKYXAzcEpwSWJyd3JRcmZLZzVLbkJDeVlSeU1PTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw"
      collection:
        $ref: '#/definitions/TimeRange'
      delivery:
        $ref: '#/definitions/TimeRange'
  TimeRange:
    description: |
      A time range with from and to time.
    type: object
    required:
      - from
      - to
    properties:
      from:
        $ref: '#/definitions/Timestamp'
      to:
        $ref: '#/definitions/Timestamp'
  JobStatus:
    type: object
    description: |
      This contains the following status:

      * Job's progress status
      * Courier's status
      * Incident status
    properties:
      progressStatus:
        description: |
          Job's progress status
        type: object
        properties:
          status:
            $ref: '#/definitions/JobProgressStatus'
          updatedAt:
            $ref: '#/definitions/Timestamp'
      courierStatus:
        $ref: '#/definitions/CourierLocationStatus'
      incidents:
        $ref: '#/definitions/Incidents'
  CancelOrderV2:
    description: Cancel order parameters
    type: object
    required:
      - id
    properties:
      id:
        $ref: '#/definitions/OrderId'


  ################
  # Common Types #
  ################
  OrderId:
    type: string
    maxLength: 140
    example: "myorder"
  AccountId:
    type: string
    maxLength: 140
    example: "myotdaccount"
  JobId:
    type: string
    maxLength: 140
    example: "myjob"
  ServiceType:
    description: |
      The service type required of an order. It must conform to service types agreed with On the dot.

      **Service type is mandatory only in the create delivery order API call.  For other types of create order call, this parameter is ignored.**
    type: string
    enum:
      - timeslot
      - asap
      - return
      - 2hour
      - 3hour
      - 4hour
      - sameday
      - 2hour-later
      - 4hour-later
    example: "asap"
  JourneyType:
    description: |
      Whether the order journey is for a delivery (store to home) or a return (home to store)
    type: string
    enum:
      - delivery
      - return
    example: "delivery"
  PackageReadyAt:
    description: |
      The time when the items are ready to be collected.

      ## For create order APIs

      Only used for asap order API.  Other create order API will ignore this field, because package ready time is encoded in the Timeslot ID.

      The time when the items will be ready.

      If not set, then downstream services will assume system time, and the response will not have this field set either.

      Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
    type: string
    example: "2018-08-09T12:15:00.000Z"
  RequireTag:
    description: |
      Constraints on the booking.
    type: string
    enum:
      - ageVerification
      - collectionSignOff
      - deliverySignOff
    example: "ageVerification"
  Requires:
    type: array
    items:
      $ref: '#/definitions/RequireTag'
  CustomData:
    description: |
      Arbitrary key:value pairs.  Value must be string.
    type: object
    example:
      "mykey1": "myvalue1"
      "mykey2": "myvalue2"
  Contact:
    description: |
      This is where all order notifications are sent.
    type: object
    properties:
      name:
        type: string
        example: "John Smith"
      mobile:
        type: string
        example: "+447777777777"
      phone:
        type: string
        example: "02077777777"
      email:
        type: string
        example: "john.smith@gmail.com"
  Timestamp:
    description: |
      Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
    type: string
    format: date-time
    example: "2018-08-09T12:15:00.000Z"
  Coordinates:
    type: object
    required:
      - longitude
      - latitude
    properties:
      longitude:
        type: number
        example: -0.1265741
      latitude:
        type: number
        example: 51.5136986
  Postcode:
    type: string
    example: "WC2E 9DD"
  Position:
    type: object
    required:
      - coordinates
    properties:
      coordinates:
        $ref: '#/definitions/Coordinates'
  Address:
    type: object
    required:
      - country
      - town
      - streets
      - postcode
    properties:
      country:
        description: ISO 3166-1 alpha-3 country code
        type: string
        minLength: 3
        maxLength: 3
        example: "GBR"
      town:
        type: string
        example: "London"
      streets:
        type: array
        items:
          type: string
        example: ["Royal Opera House", "Bow Street"]
      postcode:
        $ref: '#/definitions/Postcode'
  Stop:
    type: object
    required:
      - id
      - place
    properties:
      id:
        type: string
        example: "mystop"
      contact:
        description: |
          If set to null, then


          * if order.metadata.journeyType = `delivery` and this is a collection stop, then the place's contact details configured in Place Service will be used.

          * if order.metadata.journeyType = `return` and this is a delivery stop, then the place's contact details configured in Place Service will be use.
        $ref: '#/definitions/Contact'
      place:
        $ref: '#/definitions/Place'
      instructions:
        type: string
        example: "Please park in the courtyard"
  Place:
    type: object
    description: |
      The following description applies to request body only (not response).

      We define a `store stop` to be:

      * If `order.metadata.journeyType` is `delivery`, then for each item group, the collection stop is a "store stop"

      * If `order.metadata.journeyType` is `return`, then for each item group, the delivery stop is a "store stop"

      `store stop` must only have `place.id` and not `place.address` or `place.position`.

      This means the place must have been created in place service.

      For the other non-store stops, must set either `place.id` or `place.address`, but not both.

      If `place.position` is set, then it is used for the coordinates information of `place.address`.
    properties:
      id:
        type: string
        example: "myplace"
      position:
        $ref: '#/definitions/Position'
      addresss:
        $ref: '#/definitions/Address'
  SimplePlace:
    description: |
      In create order request, you must specify one of `id` or `address` or both.

      If `address` is not supplied, then booking service will call place service with `id` to find the address and position.

      If both `id` and `address` are supplied, then `address` will override the address from place service.

      If `position` is not supplied, then booking service will get position from place service if `id` is present, otherwise booking service calls geocode service to find the position of `address`.

      If `position` is supplied, it overrides.

      In a word, values in the request have the highest priority.
    type: object
    properties:
      id:
        type: string
        example: "myplace"
      position:
        $ref: '#/definitions/Position'
      addresss:
        $ref: '#/definitions/Address'
      instructions:
        type: string
        example: "Please beware of foxes"
  OrderStatus:
    description: |
      Order's status.

      Note this is different from item groups status, though they're related.
    type: string
    enum:
      - incomplete
      - created
      - completed
  JobProgressStatus:
    type: string
    enum:
      - created
      - cancelled
      - offline
      - allocated
      - arrived_at_collection
      - collected
      - arrived_at_delivery
      - delivered
    example: "allocated"
  CourierStatus:
    description: |
      The courier's status.
    type: string
    enum:
      - idle
      - busy
    example: "busy"
  Currency:
    description: |
      Must be ISO 4217 code
    type: string
    example: "GBP"
  Dimension:
    type: object
    required:
      - width
      - height
      - length
    properties:
      width:
        description: |
          Unit must be centimeters.
        type: number
        example: 10
      height:
        description: |
          Unit must be centimeters.
        type: number
        example: 1
      length:
        description: |
          Unit must be centimeters.
        type: number
        example: 20
  Webhook:
    description: |
      Webhook URL to send notifications to.
    type: object
    required:
      - endpoint
      - methodType
    properties:
      endpoint:
        description: URL you want to receive status update about your booking
        type: string
        example: "https://my-notification/notification"
      methodType:
        type: string
        enum:
          - POST
          - PUT
        example: "POST"
      headers:
        description: |
          Arbitrary key:value pairs. key and value must be string.
        type: object
        example:
          "authorization": "mykey"
          "company": "onthedot"
  Incidents:
    description: |
      A list of incidents, sorted by `createdAt` in ascending order.
    type: array
    items:
      $ref: '#/definitions/Incident'
  Incident:
    description: |
      Incident details.
    type: object
    required:
      - id
      - status
      - createdAt
      - updatedAt
      - impact
      - reason
    properties:
      id:
        description: |
          The incident's ID.
        type: string
        example: "9d0a8318-d16d-4893-bffa-cb6b5cb7cd4c"
      status:
        description: |
          The incident's status.  See incident status description section for details.
        type: string
        enum:
          - created
          - deleted
        example: "created"
      createdAt:
        $ref: '#/definitions/Timestamp'
      updatedAt:
        $ref: '#/definitions/Timestamp'
      reason:
        description: |
          The reason of the incident.
        type: object
        properties:
          code:
            description: |
              An incident code.
            type: string
            example: "9A"
          description:
            description: |
              An incident description.
            type: string
            example: "Partner Cancellation"
      impact:
        description: |
          The impact of the incident.
        type: object
        properties:
          code:
            description: |
              An impact code.
            type: string
            example: "7H"
          description:
            description: |
              An impact description.
            type: string
            example: "Unable to Fulfil Order"
  Notification:
    description: |
      Notification endpoints where notifications will be sent to, together with the job status type to send.
    type: object
    properties:
      emails:
        type: array
        items:
          $ref: '#/definitions/NotificationEmail'
      sms:
        type: array
        items:
          $ref: '#/definitions/NotificationSms'
      webhooks:
        type: array
        items:
          $ref: '#/definitions/NotificationWebhook'
  NotificationEmail:
    description: |
      Email for notification, together with the job status type to send.
    type: object
    properties:
      email:
        description: |
          The email address to send notification to.
        type: string
        example: "john.smith@gmail.com"
      statuses:
        description: |
          The list of job status to send.
        type: array
        items:
          $ref: '#/definitions/JobStatus'
  NotificationSms:
    description: |
      SMS for notification, together with the job status type to send.
    type: object
    properties:
      number:
        description: |
          The number to send notification to.
        type: string
        example: "+447777777777"
      statuses:
        description: |
          The list of job status to send.
        type: array
        items:
          $ref: '#/definitions/JobStatus'
  NotificationWebhook:
    description: |
      Webhook for notification, together with the job status type to send.
    type: object
    required:
      - endpoint
      - methodType
    properties:
      endpoint:
        description: |
          URL you want to receive status update about your booking.
        type: string
        example: "https://my-notification/notification"
      methodType:
        type: string
        enum:
          - POST
          - PUT
        example: "POST"
      headers:
        description: |
          Arbitrary key:value pairs. key and value must be string.
        type: object
        example:
          "authorization": "mykey"
          "company": "onthedot"
      statuses:
        description: |
          The list of job status to send.
        type: array
        items:
          $ref: '#/definitions/JobStatus'
  Item:
    type: object
    required:
      - id
      - quantity
    properties:
      id:
        type: string
        maxLength: 140
        example: "myitem"
      descriptions:
        type: string
        maxLength: 500
        example: "Some awesome items"
      quantity:
        type: integer
        format: int64
        example: 2
      metrics:
        $ref: '#/definitions/ItemMetrics'
  ItemMetrics:
    type: object
    properties:
      weight:
        description: |
          Unit must be grams.
        type: number
        example: 500
      dimension:
        $ref: '#/definitions/Dimension'
  CourierLocationStatus:
    type: object
    properties:
      location:
        $ref: '#/definitions/Coordinates'
      updatedAt:
        description: |
          The time when the courier's location was updated.

          Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
        type: string
        example: "2018-08-09T12:15:15.123Z"
  SearchParamTimeRange:
    type: object
    properties:
      from:
        description: |
          The start of the time range.

          Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
        type: string
        example: "2018-08-08T12:13:14.123Z"
      to:
        description: |
          The end of the time range.

          Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
        type: string
        example: "2018-08-09T12:13:14.123Z"
  Eta:
    description: |
      ETA for collection and/or delivery.
    type: object
    properties:
      collection:
        description: |
          Collection ETA
        type: object
        properties:
          courierId:
            description: |
              The courier unique identifier.
            type: string
            example: "mycourier"
          time:
            $ref: '#/definitions/Timestamp'
          message:
            type: string
            example: "unavailable"
      delivery:
        description: |
          Delivery ETA
        type: object
        properties:
          courierId:
            description: |
              The courier unique identifier.
            type: string
            example: "mycourier"
          time:
            $ref: '#/definitions/Timestamp'
          message:
            type: string
            example: "unavailable"


