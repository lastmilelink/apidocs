swagger: '2.0'
schemes:
  - https
host: 'sandbox.onthedot.com'
basePath: /V2
x-apigee:
  rootRules:
    - node: PostFlow
      attr:
        name: PostFlow
      content:
        - node: Request
          content: ""
        - node: Response
          content: ""
    - node: PreFlow
      attr:
        name: PreFlow
      content:
        - node: Response
          content: ""
        - node: Request
          content:
            - node: Step
              content:
                - node: Name
                  content: rate-limiter
    - node: DefaultFaultRule
      attr:
        name: default-rule
      content:
        - node: Step
          content:
            - node: Name
              content: add-cors
        - node: AlwaysEnforce
          content: true
    - node: HTTPProxyConnection
      content:
        - node: BasePath
          content: /booking
        - node: Properties
          content: ""
        - node: VirtualHost
          content: secure
    - node: RouteRule
      attr:
        name: no-route
      content:
        - node: Condition
          content: request.verb == "OPTIONS"
    - node: RouteRule
      attr:
        name: default
      content:
        - node: TargetEndpoint
          content: default
    - node: FaultRules
      content: ""
  additionalFlows:
    - node: Flow
      attr:
        name: pre-flight
      content:
        - node: Request
          content: ""
        - node: Response
          content:
            - node: Step
              content:
                - node: Name
                  content: add-cors
        - node: Condition
          content: request.verb == "OPTIONS"
    - node: Flow
      attr:
        name: private-by-default
      content:
        - node: Description
          content: Make any non-listed flow private
        - node: Response
          content: ""
        - node: Request
          content:
            - node: Step
              content:
                - node: Name
                  content: deny-external
info:
  description: |
    **Welcome to the On the dot Booking API Reference documentation.**

    This documentation is currently in Beta and will be updated over the next few months. For assistance with using the APIs, please contact our Partner team.

    **All APIs require an `Authorization` header.**

    You will need to register [here](https://developer.onthedot.com/getting-started) to obtain a token which is used in the request headers.
  version: "2.0.0."
  title: Booking Service V2.0
  termsOfService: 'https://www.onthedot.com/terms-and-conditions'
  contact:
    email: partners@onthedot.co.uk
x-logo:
  url: |
    https://otd-static-content-prod.lastmilelink.eu/logos/onthedot-new.png
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Timeslot
    description: Everything about Timeslot
x-tagGroups:
  - name: Timeslot
    tags:
      - Timeslot
  - name: Order V2
    tags:
      - orderV2
securityDefinitions:
  api_key:
    description: |
      API calls must provide `Authorization` header.
    type: apiKey
    name: Authorization
    in: header
x-servers:
  - url: '/localhost:8181'
    description: Default server
paths:
  '/v2/accounts/{accountId}/timeslots':
    post:
      tags:
        - Timeslot
      summary: Get available timeslots for a booking
      description: |
        This API returns a list of available timeslots. Allows the options to be
        presented to an end-user for selection.
      operationId: getTimeslotIDs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: body
          name: body
          description: Timeslot parameters
          required: true
          schema:
            $ref: '#/definitions/TimeslotReq'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TimeslotRes'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  '/v2/accounts/{accountId}/orders':
    post:
      tags:
        - orderV2
      summary: Create order
      description: |
        This API creates an order with the specified ID.

        This API allows the caller to override all values (timeslots, stops) with their own values.

        If the caller sends only timeslot ID or place ID, then the relevant services will be called to get the details.
      operationId: createOrderV2
      x-apigee:
        included: true
        rootRules:
          - node: Request
            content:
              - node: Step
                content:
                  - node: Name
                    content: platform-auth
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: body
          name: body
          description: Order object that needs to be created
          required: true
          schema:
            $ref: '#/definitions/OrderV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Conflict
  '/v2/accounts/{accountId}/orders/{orderId}':
    get:
      tags:
        - orderV2
      summary: Get order
      description: |
        This API gets order with account ID and order ID.
      operationId: getOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: path
          name: orderId
          type: string
          maxLength: 140
          description: order ID
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '404':
          description: Not found
        '401':
          description: Unauthorized
  '/v2/accounts/{accountId}/orders/search':
    post:
      tags:
        - orderV2
      summary: Search order
      description: |
        This API returns a list of orders based on the provided search criteria.

        `createdAt`, `collectedBy` and `deliveredBy` are time ranges.  If there are multiple jobs in the order, then any job satisfying these will cause the order to be returned.

        `coordinates` can be any point on Earth.

        Paging is supported.  See request and response for details.
      operationId: searchOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: body
          name: body
          description: The search order parameters
          required: true
          schema:
            $ref: '#/definitions/SearchOrderV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SearchOrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  '/v2/accounts/{accountId}/orders/{orderId}/cancel':
    put:
      tags:
        - orderV2
      summary: Cancel order
      description: |
        This API can be used to cancel an order, under the following conditions:

        1. The order exists.

        2. None of the jobs of the order have the status `collected` yet.

        Once an order is cancelled, it cannot be re-created or un-cancelled.  You will need to create a new order in this case.
      operationId: cancelOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: path
          name: orderId
          type: string
          maxLength: 140
          description: order ID
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/v2/accounts/{accountId}/orders/{orderId}/amend':
    put:
      tags:
        - orderV2
      summary: Amend order
      description: |
        This API amends an order and updates the corresponding jobs in COSMO.

        The following rules apply:

        1. The order must already exist.

        2. For each job of the order:

        1) If only `items` is updated, then the job's progress status must be one of `created`, `allocated`, `arrived_at_collection` (i.e., amending is not allowed after collection).

        2) If any other field is changed (including `timeslot`, `metadata`), then the job's progress status must be `created` (i.e., amending is not allowed after allocation).

        3) Collection and delivery stop IDs cannot be changed.

        4) If stops corresponding to the job are changed, then rule 2) applies.

        > Note `customData` uses incremental update.  All other fields are full-replacement update.
      operationId: amendOrderV2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accountId
          type: string
          maxLength: 140
          description: account ID
          required: true
        - in: path
          name: orderId
          type: string
          maxLength: 140
          description: order ID
          required: true
        - in: body
          name: body
          description: The cancel order parameters
          required: true
          schema:
            $ref: '#/definitions/AmendOrderV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderResV2'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
definitions:
  # Order V2 - API definition
  TimeslotReq:
    description: Timeslot request
    type: object
    required:
      - serviceType
      - collection
      - delivery
      - packageReadyAt
    properties:
      serviceType:
        $ref: '#/definitions/ServiceType'
      collection:
        description: |
          The collection place ID or address.
        $ref: '#/definitions/TimeslotPlace'
      delivery:
        description: |
          The delivery place ID or address.
        $ref: '#/definitions/TimeslotPlace'
      packageReadyAt:
        $ref: '#/definitions/PackageReadyAt'
      dates:
        description: |
          Used to override the opening/closing time of store for special dates.

          Format:
          ```
          {
            "<date>": {
              "openTime": "<time>",
              "closeTime": "<time>"
            },
            ...
          }
          ```
          where

          * `<date>` must have format `yyyy-MM-dd`, e.g., `2017-04-21`
          * `<time>` must have format `HH:mm`, e.g., `22:32`
        example:
          "2018-08-09":
            openTime: "12:00"
            closeTime: "17:00"
          "2018-08-10":
            openTime: "12:00"
            closeTime: "16:00"
  TimeslotPlace:
    description: |
      Place details in Timeslot request.  Must set one of `id` and `address`, but not both.
    type: object
    properties:
      id:
        description: |
          If you pass a Place ID it must be already configured by On the dot.
        type: string
        example: "myplaceID"
      address:
        description: |
          Address of the place.
        $ref: '#/definitions/Address'
  TimeslotRes:
    description: |
      Timeslots response.
    type: object
    properties:
      timeslots:
        description: |
          'Timeslots' details.


          Format:

          ```
          "timeslots": {
              {
                "<date>": [
                  {
                    "id": "<timeslot_id>",
                    "collectionSlot": {
                      "collectFrom": "<timestamp>",
                      "collectBy": "<timestamp>"
                    },
                    "deliverySlot": {
                      "deliverFrom": "<timestamp>",
                      "deliverBy": "<timestamp>"
                    },
                    "slotExpiresAt": "<timestamp>"
                  },
                  ...
                ],
                ...
              }
          }
          ```

          where


          * `<date>` has format `yyyy-MM-dd`, e.g., `2017-04-21`

          * `<timestamp>` has format `2006-01-02T15:04:05.999Z` in Zulu timezone
          only

          * `<timeslot_id>` is a string that should be used when creating orders
        type: object
    example:
      timeslots:
        '2018-01-11':
          - id: NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBifkxwNGQ1ZFd6Y1B3Tnd2R1NtMWQxUDFGYVl3WW1ZTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw
            collectionSlot:
              collectFrom: "2018-01-11T18:35:00.000Z"
              collectBy: "2018-01-11T18:35:00.000Z"
            deliverySlot:
              deliverFrom: "2018-01-11T18:45:00.000Z"
              deliverBy: "2018-01-11T18:45:00.000Z"
            slotExpiresAt: "2018-01-11T18:15:00.000Z"
          - id: "NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBiflY5R2V5ZUF6aHhCQUJ3b0Y1N3c1MVpoOWRFOTNhTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw"
            collectionSlot:
              collectFrom: "2018-01-11T18:40:00.000Z"
              collectBy: "2018-01-11T18:40:00.000Z"
            deliverySlot:
              deliverFrom: "2018-01-11T18:50:00.000Z"
              deliverBy: "2018-01-11T18:50:00.000Z"
            slotExpiresAt: "2018-01-11T18:15:00.000Z"
          - id: "NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBifmtKYXAzcEpwSWJyd3JRcmZLZzVLbkJDeVlSeU1PTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw"
            collectionSlot:
              collectFrom: "2018-01-11T18:45:00.000Z"
              collectBy: "2018-01-11T18:45:00.000Z"
            deliverySlot:
              deliverFrom: "2018-01-11T18:55:00.000Z"
              deliverBy: "2018-01-11T18:55:00.000Z"
            slotExpiresAt: "2018-01-11T18:15:00.000Z"

  OrderV2:
    description: An order object
    type: object
    required:
      - id
      - metadata
      - jobs
      - stops
    properties:
      id:
        $ref: '#/definitions/OrderId'
      metadata:
        $ref: '#/definitions/OrderMetadataV2'
      customData:
        $ref: '#/definitions/CustomData'
      contact:
        $ref: '#/definitions/Contact'
      notification:
        $ref: '#/definitions/Notification'
      jobs:
        type: array
        items:
          $ref: '#/definitions/JobV2'
      stops:
        type: array
        items:
          $ref: '#/definitions/Stop'
      instructions:
        type: string
        maxLength: 500
        example: "Fragile items, be careful"
  OrderResV2:
    description: An order object
    type: object
    required:
      - id
      - metadata
      - jobs
      - stops
    properties:
      id:
        $ref: '#/definitions/OrderId'
      accountId:
        $ref: '#/definitions/AccountId'
      metadata:
        $ref: '#/definitions/OrderMetadataResV2'
      customData:
        $ref: '#/definitions/CustomData'
      contact:
        $ref: '#/definitions/Contact'
      notification:
        $ref: '#/definitions/Notification'
      jobs:
        type: array
        items:
          $ref: '#/definitions/JobResV2'
      stops:
        type: array
        items:
          $ref: '#/definitions/Stop'
      instructions:
        type: string
        example: "Fragile items, be careful"
      status:
        type: object
        properties:
          status:
            $ref: '#/definitions/OrderStatusV2'
          updatedAt:
            $ref: '#/definitions/Timestamp'
      createdAt:
        $ref: '#/definitions/Timestamp'
      updatedAt:
        $ref: '#/definitions/Timestamp'
  SearchOrderV2:
    description: |
      All fields are optional, except `sortDirection`.

      The different criteria are joined by "and" logic except in `places` where the condition can be explicitely specified (AND/OR).
    type: object
    required:
      - sortDirection
    properties:
      clientRefId:
        description: |
          Search by client ref ID.  If this parameter is set, then only the following parameters can be set:

          * `orderStatus`
          * `JobStatus`
          * `sortDirection`
        type: string
        example: "myclientrefid1"
      createdAt:
        description: |
          The time when the order was created.
        $ref: '#/definitions/SearchParamTimeRange'
      collectedBy:
        $ref: '#/definitions/SearchParamTimeRange'
      deliveredBy:
        $ref: '#/definitions/SearchParamTimeRange'
      orderStatus:
        description: Order status
        type: array
        items:
          type: string
          maxLength: 140
          example: completed
      jobStatus:
        description: Job status
        type: array
        items:
          type: string
          maxLength: 140
          example: delivered
      sortDirection:
        description: |
          Results are sorted by `createdAt`.

          This field controls whether the results are sorted in ascending or descending order.
        type: string
        enum:
          - asc
          - desc
        example: "asc"
      offset:
        description: |
          The offset for paging.

          Should use the value in the previous response.
        type: integer
        format: int64
        example: 100
      length:
        description: |
          The number of orders to return.

          Must be between 1 and 1000.

          Default to 1000.
        type: integer
        format: int64
        example: 100
  SearchOrderResV2:
    description: Search response object
    type: object
    required:
      - offset
    properties:
      orders:
        type: array
        items:
          $ref: '#/definitions/OrderResV2'
      failures:
        type: array
        items:
          type: string
        example: ["Failed to find order0", "Failed to find order1"]
      offset:
        type: integer
        format: int64
        example: 5
  AmendOrderV2:
    description: An amend order object
    type: object
    required:
      - id
    properties:
      customData:
        $ref: '#/definitions/CustomData'
      contact:
        $ref: '#/definitions/Contact'
      notification:
        $ref: '#/definitions/Notification'
      jobs:
        type: array
        items:
          $ref: '#/definitions/AmendJobV2'
      stops:
        type: array
        items:
          $ref: '#/definitions/AmendStopV2'
      instructions:
        type: string
        maxLength: 500
        example: "Fragile items, be careful"
  AmendJobV2:
    description: An amend job object
    type: object
    required:
      - id
    properties:
      id:
        $ref: '#/definitions/JobId'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
      timeslot:
        $ref: '#/definitions/TimeslotV2'
  AmendStopV2:
    description: An amend stop object
    type: object
    required:
      - id
    properties:
      id:
        type: string
        maxLength: 140
        example: "mystop"
      contact:
        $ref: '#/definitions/Contact'
      place:
        $ref: '#/definitions/AmendPlaceV2'
  AmendPlaceV2:
    type: object
    description: An amend place object
    required:
      - address
    properties:
      address:
        $ref: '#/definitions/Address'
  OrderStatusV2:
    description: |
      Order's status.

      Note this is different from job status, though they're related.  See beginning of doc for details.
    type: string
    enum:
      - incomplete
      - created
      - completed
  OrderMetadataV2:
    type: object
    required:
      - serviceType
    properties:
      clientRefId:
        description: |
          Client reference ID.  This field can be reused for multiple orders.

          This field is searchable.  This field is not amendable.
        type: string
        example: "myclientrefid"
      serviceType:
        $ref: '#/definitions/ServiceType'
      isTest:
        description: |
          Mark the order as a test order.

          The default value is dependent on the account state.

          | Account State | `isTest` |
          | ------------- | -------- |
          | `live` | `false` |
          | `onboarding | `true` |
          | `test` | `true` |

          Note setting this field to `false` is the same as setting to `null`.
        type: boolean
        example: true
  OrderMetadataResV2:
    type: object
    required:
      - serviceType
    properties:
      sector:
        description: |
          The sector of the order.
        type: string
        example: "Local"
      clientRefId:
        description: |
          Client reference ID.  This field can be reused for multiple orders.

          This field is searchable.  This field is not amendable.
        type: string
        example: "myclientrefid"
      serviceType:
        $ref: '#/definitions/ServiceType'
      isTest:
        description: |
          Mark the order as a test order.

          The default value is dependent on the account state.

          | Account State | `isTest` |
          | ------------- | -------- |
          | `live` | `false` |
          | `onboarding | `true` |
          | `test` | `true` |
        type: boolean
        example: true
      trackingUrl:
        description: |
          User can track an order once after parcels collected and before
          delivery.
        type: string
        example: "https://trackservice/myorder"
  JobV2:
    type: object
    required:
      - id
      - metadata
      - items
      - timeslot
      - collection
      - delivery
    properties:
      id:
        $ref: '#/definitions/JobId'
      metadata:
        $ref: '#/definitions/JobMetadata'
      requires:
        $ref: '#/definitions/Requires'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
      timeslot:
        $ref: '#/definitions/TimeslotV2'
      collection:
        $ref: '#/definitions/JobStop'
      delivery:
        $ref: '#/definitions/JobStop'
  JobResV2:
    type: object
    required:
      - id
      - metadata
      - items
      - timeslot
      - collection
      - delivery
    properties:
      id:
        $ref: '#/definitions/JobId'
      metadata:
        $ref: '#/definitions/JobMetadata'
      requires:
        $ref: '#/definitions/Requires'
      items:
        type: array
        items:
          $ref: '#/definitions/Item'
      timeslot:
        $ref: '#/definitions/TimeslotV2'
      collection:
        $ref: '#/definitions/JobStop'
      delivery:
        $ref: '#/definitions/JobStop'
      status:
        $ref: '#/definitions/JobStatus'
      eta:
        $ref: '#/definitions/Eta'
  JobStop:
    type: object
    required:
      - stopId
    properties:
      stopId:
        type: string
      instructions:
        type: string
  JobMetadata:
    type: object
    required:
      - journeyType
    properties:
      journeyType:
        $ref: '#/definitions/JourneyType'
  TimeslotV2:
    type: object
    description: |
      Must specify either `id` or `collection` + `delivery`, but not both.
    properties:
      id:
        type: string
        example: "NWZmNDZiNjMtMjg5NS00ZjYwLThiMDktNThjNzA5YzNhNTBifmtKYXAzcEpwSWJyd3JRcmZLZzVLbkJDeVlSeU1PTH5FQzJBKzRQSH5XQzJOKzRFU34xNTE1NjkzODk5fjE1MTU2OTQ1MDB+MH4wfjQuMzAyMzAw"
      collection:
        $ref: '#/definitions/TimeRange'
      delivery:
        $ref: '#/definitions/TimeRange'
  TimeRange:
    description: |
      A time range with from and to time.
    type: object
    required:
      - from
      - to
    properties:
      from:
        $ref: '#/definitions/Timestamp'
      to:
        $ref: '#/definitions/Timestamp'
  JobStatus:
    type: object
    description: |
      This contains the following status:

      * Job's progress status
      * Courier's status
      * Incident status
    properties:
      progressStatus:
        description: |
          Job's progress status
        type: object
        properties:
          status:
            $ref: '#/definitions/JobProgressStatus'
          updatedAt:
            $ref: '#/definitions/Timestamp'
      courierStatus:
        $ref: '#/definitions/CourierLocationStatus'
      incidents:
        $ref: '#/definitions/Incidents'
  CancelOrderV2:
    description: Cancel order parameters
    type: object
    required:
      - id
    properties:
      id:
        $ref: '#/definitions/OrderId'


  ################
  # Common Types #
  ################
  OrderId:
    type: string
    maxLength: 140
    example: "myorder"
  AccountId:
    type: string
    maxLength: 140
    example: "myotdaccount"
  JobId:
    type: string
    maxLength: 140
    example: "myjob"
  ServiceType:
    description: |
      The service type required of an order. It must conform to service types agreed with On the dot.

      **Service type is mandatory only in the create delivery order API call.  For other types of create order call, this parameter is ignored.**
    type: string
    enum:
      - timeslot
      - asap
      - return
      - 2hour
      - 3hour
      - 4hour
      - sameday
      - 2hour-later
      - 4hour-later
    example: "asap"
  JourneyType:
    description: |
      Whether the order journey is for a delivery (store to home) or a return (home to store)
    type: string
    enum:
      - delivery
      - return
    example: "delivery"
  PackageReadyAt:
    description: |
      The time when the items are ready to be collected.

      ## For create order APIs

      Only used for asap order API.  Other create order API will ignore this field, because package ready time is encoded in the Timeslot ID.

      The time when the items will be ready.

      If not set, then downstream services will assume system time, and the response will not have this field set either.

      Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
    type: string
    example: "2018-08-09T12:15:00.000Z"
  RequireTag:
    description: |
      Constraints on the booking.
    type: string
    enum:
      - ageVerification
      - collectionSignOff
      - deliverySignOff
    example: "ageVerification"
  Requires:
    type: array
    items:
      $ref: '#/definitions/RequireTag'
  CustomData:
    description: |
      Arbitrary key:value pairs.  Value must be string.
    type: object
    example:
      "mykey1": "myvalue1"
      "mykey2": "myvalue2"
  Contact:
    description: |
      This is where all order notifications are sent.
    type: object
    properties:
      name:
        type: string
        example: "John Smith"
      mobile:
        type: string
        example: "+447777777777"
      phone:
        type: string
        example: "02077777777"
      email:
        type: string
        example: "john.smith@gmail.com"
  Timestamp:
    description: |
      Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
    type: string
    format: date-time
    example: "2018-08-09T12:15:00.000Z"
  Coordinates:
    type: object
    required:
      - longitude
      - latitude
    properties:
      longitude:
        type: number
        example: -0.1265741
      latitude:
        type: number
        example: 51.5136986
  Postcode:
    type: string
    example: "WC2E 9DD"
  Position:
    type: object
    required:
      - coordinates
    properties:
      coordinates:
        $ref: '#/definitions/Coordinates'
  Address:
    type: object
    required:
      - country
      - town
      - streets
      - postcode
    properties:
      country:
        description: ISO 3166-1 alpha-3 country code
        type: string
        minLength: 3
        maxLength: 3
        example: "GBR"
      town:
        type: string
        example: "London"
      streets:
        type: array
        items:
          type: string
        example: ["Royal Opera House", "Bow Street"]
      postcode:
        $ref: '#/definitions/Postcode'
  Stop:
    type: object
    required:
      - id
      - place
    properties:
      id:
        type: string
        example: "mystop"
      contact:
        description: |
          If set to null, then


          * if order.metadata.journeyType = `delivery` and this is a collection stop, then the place's contact details configured in Place Service will be used.

          * if order.metadata.journeyType = `return` and this is a delivery stop, then the place's contact details configured in Place Service will be use.
        $ref: '#/definitions/Contact'
      place:
        $ref: '#/definitions/Place'
      instructions:
        type: string
        example: "Please park in the courtyard"
  Place:
    type: object
    description: |
      The following description applies to request body only (not response).

      We define a `store stop` to be:

      * If `order.metadata.journeyType` is `delivery`, then for each item group, the collection stop is a "store stop"

      * If `order.metadata.journeyType` is `return`, then for each item group, the delivery stop is a "store stop"

      `store stop` must only have `place.id` and not `place.address` or `place.position`.

      This means the place must have been created in place service.

      For the other non-store stops, must set either `place.id` or `place.address`, but not both.

      If `place.position` is set, then it is used for the coordinates information of `place.address`.
    properties:
      id:
        type: string
        example: "myplace"
      position:
        $ref: '#/definitions/Position'
      addresss:
        $ref: '#/definitions/Address'
  SimplePlace:
    description: |
      In create order request, you must specify one of `id` or `address` or both.

      If `address` is not supplied, then booking service will call place service with `id` to find the address and position.

      If both `id` and `address` are supplied, then `address` will override the address from place service.

      If `position` is not supplied, then booking service will get position from place service if `id` is present, otherwise booking service calls geocode service to find the position of `address`.

      If `position` is supplied, it overrides.

      In a word, values in the request have the highest priority.
    type: object
    properties:
      id:
        type: string
        example: "myplace"
      position:
        $ref: '#/definitions/Position'
      addresss:
        $ref: '#/definitions/Address'
      instructions:
        type: string
        example: "Please beware of foxes"
  OrderStatus:
    description: |
      Order's status.

      Note this is different from item groups status, though they're related.
    type: string
    enum:
      - incomplete
      - created
      - completed
  JobProgressStatus:
    type: string
    enum:
      - created
      - cancelled
      - offline
      - allocated
      - arrived_at_collection
      - collected
      - arrived_at_delivery
      - delivered
    example: "allocated"
  CourierStatus:
    description: |
      The courier's status.
    type: string
    enum:
      - idle
      - busy
    example: "busy"
  Currency:
    description: |
      Must be ISO 4217 code
    type: string
    example: "GBP"
  Dimension:
    type: object
    required:
      - width
      - height
      - length
    properties:
      width:
        description: |
          Unit must be centimeters.
        type: number
        example: 10
      height:
        description: |
          Unit must be centimeters.
        type: number
        example: 1
      length:
        description: |
          Unit must be centimeters.
        type: number
        example: 20
  Webhook:
    description: |
      Webhook URL to send notifications to.
    type: object
    required:
      - endpoint
      - methodType
    properties:
      endpoint:
        description: URL you want to receive status update about your booking
        type: string
        example: "https://my-notification/notification"
      methodType:
        type: string
        enum:
          - POST
          - PUT
        example: "POST"
      headers:
        description: |
          Arbitrary key:value pairs. key and value must be string.
        type: object
        example:
          "authorization": "mykey"
          "company": "onthedot"
  Incidents:
    description: |
      A list of incidents, sorted by `createdAt` in ascending order.
    type: array
    items:
      $ref: '#/definitions/Incident'
  Incident:
    description: |
      Incident details.
    type: object
    required:
      - id
      - status
      - createdAt
      - updatedAt
      - impact
      - reason
    properties:
      id:
        description: |
          The incident's ID.
        type: string
        example: "9d0a8318-d16d-4893-bffa-cb6b5cb7cd4c"
      status:
        description: |
          The incident's status.  See incident status description section for details.
        type: string
        enum:
          - created
          - deleted
        example: "created"
      createdAt:
        $ref: '#/definitions/Timestamp'
      updatedAt:
        $ref: '#/definitions/Timestamp'
      reason:
        description: |
          The reason of the incident.
        type: object
        properties:
          code:
            description: |
              An incident code.
            type: string
            example: "9A"
          description:
            description: |
              An incident description.
            type: string
            example: "Partner Cancellation"
      impact:
        description: |
          The impact of the incident.
        type: object
        properties:
          code:
            description: |
              An impact code.
            type: string
            example: "7H"
          description:
            description: |
              An impact description.
            type: string
            example: "Unable to Fulfil Order"
  Notification:
    description: |
      Notification endpoints where notifications will be sent to, together with the job status type to send.
    type: object
    properties:
      emails:
        type: array
        items:
          $ref: '#/definitions/NotificationEmail'
      sms:
        type: array
        items:
          $ref: '#/definitions/NotificationSms'
      webhooks:
        type: array
        items:
          $ref: '#/definitions/NotificationWebhook'
  NotificationEmail:
    description: |
      Email for notification, together with the job status type to send.
    type: object
    properties:
      email:
        description: |
          The email address to send notification to.
        type: string
        example: "john.smith@gmail.com"
      statuses:
        description: |
          The list of job status to send.
        type: array
        items:
          $ref: '#/definitions/JobStatus'
  NotificationSms:
    description: |
      SMS for notification, together with the job status type to send.
    type: object
    properties:
      number:
        description: |
          The number to send notification to.
        type: string
        example: "+447777777777"
      statuses:
        description: |
          The list of job status to send.
        type: array
        items:
          $ref: '#/definitions/JobStatus'
  NotificationWebhook:
    description: |
      Webhook for notification, together with the job status type to send.
    type: object
    required:
      - endpoint
      - methodType
    properties:
      endpoint:
        description: |
          URL you want to receive status update about your booking.
        type: string
        example: "https://my-notification/notification"
      methodType:
        type: string
        enum:
          - POST
          - PUT
        example: "POST"
      headers:
        description: |
          Arbitrary key:value pairs. key and value must be string.
        type: object
        example:
          "authorization": "mykey"
          "company": "onthedot"
      statuses:
        description: |
          The list of job status to send.
        type: array
        items:
          $ref: '#/definitions/JobStatus'
  Item:
    type: object
    required:
      - id
      - quantity
    properties:
      id:
        type: string
        maxLength: 140
        example: "myitem"
      descriptions:
        type: string
        maxLength: 500
        example: "Some awesome items"
      quantity:
        type: integer
        format: int64
        example: 2
      metrics:
        $ref: '#/definitions/ItemMetrics'
  ItemMetrics:
    type: object
    properties:
      weight:
        description: |
          Unit must be grams.
        type: number
        example: 500
      dimension:
        $ref: '#/definitions/Dimension'
  CourierLocationStatus:
    type: object
    properties:
      location:
        $ref: '#/definitions/Coordinates'
      updatedAt:
        description: |
          The time when the courier's location was updated.

          Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
        type: string
        example: "2018-08-09T12:15:15.123Z"
  SearchParamTimeRange:
    type: object
    properties:
      from:
        description: |
          The start of the time range.

          Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
        type: string
        example: "2018-08-08T12:13:14.123Z"
      to:
        description: |
          The end of the time range.

          Format `2006-01-02T15:04:05.999Z` in Zulu timezone only
        type: string
        example: "2018-08-09T12:13:14.123Z"
  Eta:
    description: |
      ETA for collection and/or delivery.
    type: object
    properties:
      collection:
        description: |
          Collection ETA
        type: object
        properties:
          courierId:
            description: |
              The courier unique identifier.
            type: string
            example: "mycourier"
          time:
            $ref: '#/definitions/Timestamp'
          message:
            type: string
            example: "unavailable"
      delivery:
        description: |
          Delivery ETA
        type: object
        properties:
          courierId:
            description: |
              The courier unique identifier.
            type: string
            example: "mycourier"
          time:
            $ref: '#/definitions/Timestamp'
          message:
            type: string
            example: "unavailable"


