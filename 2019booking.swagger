<h1 id='introduction'>Introduction</h1>
<p><strong>Welcome to the On the dot Booking API Reference documentation.</strong></p>

<p>This documentation is currently in Beta and will be updated over the next few months. For assistance with using the APIs, please contact our Partner team.</p>

<p><strong>All APIs require an <code>Authorization</code> header.</strong></p>

<p>You will need to register with this site to receive a token which is used in the request headers.</p>
<h1 id='quick-start'>Quick Start</h1><h1 id='core-concepts'>Core Concepts</h1>
<p>An order comprises the following parts:</p>

<ul>
<li><p><strong>job</strong>: a parcel to be collected and delivered.  A job has one collection stop and one delivery stop, together with timeslots (explained below).  An order can contain multiple jobs.</p></li>
<li><p><strong>stop</strong>: a geographical location.  Each job has one collection stop and one delivery stop.</p></li>
<li><p><strong>timeslot</strong>: a period of time where collection and delivery should happen.  A timeslot defines a start time and an end time.  The user can either specify the timeslot values in request, or get a timeslot ID from OTD and use it.</p></li>
</ul>
<h2 id='quick-start-2'>Quick Start</h2>
<p>Here is an example request to create an order.
```
POST https://TODO/v2/accounts/myaccount/orders</p>

<p>Request:</p>

<p>{
  &quot;id&quot;: &quot;myorder&quot;,
  &quot;metadata&quot;: {
    &quot;serviceType&quot;: &quot;asap&quot;
  },
  &quot;jobs&quot;: [
    {
      &quot;id&quot;: &quot;job0&quot;,
      &quot;metadata&quot;: {
        &quot;journeyType&quot;: &quot;delivery&quot;
      },
      &quot;items&quot;: [
        {
          &quot;id&quot;: &quot;itemgroup0:item0&quot;,
          &quot;quantity&quot;: 1
        }
      ],
      &quot;collection&quot;: {
        &quot;stopId&quot;: &quot;stop0&quot;
      },
      &quot;delivery&quot;: {
        &quot;stopId&quot;: &quot;stop1&quot;
      },
      &quot;timeslot&quot;: {
        &quot;collection&quot;: {
          &quot;from&quot;: &quot;2019-01-02T13:30:00.000Z&quot;,
          &quot;to&quot;: &quot;2019-01-02T14:30:00.000Z&quot;
        },
        &quot;delivery&quot;: {
          &quot;from&quot;: &quot;2019-01-02T18:30:00.000Z&quot;,
          &quot;to&quot;: &quot;2019-01-02T19:30:00.000Z&quot;
        }
      }
    }
  ],
  &quot;stops&quot;: [
    {
      &quot;id&quot;: &quot;stop0&quot;,
      &quot;place&quot;: {
        &quot;address&quot;: {
          &quot;country&quot;: &quot;GBR&quot;,
          &quot;town&quot;: &quot;London&quot;,
          &quot;streets&quot;: [
            &quot;Royal Opera House&quot;,
            &quot;Bow Street&quot;
          ],
          &quot;postcode&quot;: &quot;WC2E 9DD&quot;
        }
      }
    },
    {
      &quot;id&quot;: &quot;stop1&quot;,
      &quot;place&quot;: {
        &quot;address&quot;: {
          &quot;country&quot;: &quot;GBR&quot;,
          &quot;town&quot;: &quot;London&quot;,
          &quot;streets&quot;: [
            &quot;English National Opera&quot;,
            &quot;St Martin&#39;s Lane&quot;
          ],
          &quot;postcode&quot;: &quot;WC2N 4ES&quot;
        }
      }
    }
  ]
}
```</p>

<p>And here is an example response when getting an order (or the response of creating an order)
```
GET https://TODO/v2/accounts/myaccount/orders/myorder</p>

<p>Response:</p>

<p>{
  &quot;id&quot;: &quot;myorder&quot;,
  &quot;metadata&quot;: {
    &quot;vehicleType&quot;: &quot;bicycle&quot;,
    &quot;serviceType&quot;: &quot;asap&quot;,
    &quot;trackingUrl&quot;: &quot;https://trackmydriver-prod.lastmilelink.eu/myaccount::myorder?token=7%2FI9ZlUZ7rnNBUkKORI2fGrPdEIaMV%2BNkrYbLFSQQW4%3D&quot;
  },
  &quot;jobs&quot;: [
    {
      &quot;id&quot;: &quot;job0&quot;,
      &quot;metadata&quot;: {
        &quot;journeyType&quot;: &quot;delivery&quot;
      },
      &quot;items&quot;: [
        {
          &quot;id&quot;: &quot;itemgroup0:item0&quot;,
          &quot;quantity&quot;: 1
        }
      ],
      &quot;collection&quot;: {
        &quot;stopId&quot;: &quot;stop0&quot;
      },
      &quot;delivery&quot;: {
        &quot;stopId&quot;: &quot;stop1&quot;
      },
      &quot;timeslot&quot;: {
        &quot;collection&quot;: {
          &quot;from&quot;: &quot;2019-01-02T13:30:00.000Z&quot;,
          &quot;to&quot;: &quot;2019-01-02T14:30:00.000Z&quot;
        },
        &quot;delivery&quot;: {
          &quot;from&quot;: &quot;2019-01-02T18:30:00.000Z&quot;,
          &quot;to&quot;: &quot;2019-01-02T19:30:00.000Z&quot;
        }
      },
      &quot;status&quot;: {
        &quot;progressStatus&quot;: {
          &quot;status&quot;: &quot;created&quot;,
          &quot;updatedAt&quot;: &quot;2019-01-02T13:30:00.048Z&quot;
        }
      }
    }
  ],
  &quot;stops&quot;: [
    {
      &quot;id&quot;: &quot;stop0&quot;,
      &quot;place&quot;: {
        &quot;position&quot;: {
          &quot;coordinates&quot;: {
            &quot;longitude&quot;: -0.1265741,
            &quot;latitude&quot;: 51.5136986
          }
        },
        &quot;address&quot;: {
          &quot;country&quot;: &quot;GBR&quot;,
          &quot;town&quot;: &quot;London&quot;,
          &quot;streets&quot;: [
            &quot;Royal Opera House&quot;,
            &quot;Bow Street&quot;
          ],
          &quot;postcode&quot;: &quot;WC2E 9DD&quot;
        }
      }
    },
    {
      &quot;id&quot;: &quot;stop1&quot;,
      &quot;place&quot;: {
        &quot;id&quot;: &quot;place2&quot;,
        &quot;position&quot;: {
          &quot;coordinates&quot;: {
            &quot;longitude&quot;: -0.1288661,
            &quot;latitude&quot;: 51.5098553
          }
        },
        &quot;address&quot;: {
          &quot;country&quot;: &quot;GBR&quot;,
          &quot;town&quot;: &quot;London&quot;,
          &quot;streets&quot;: [
            &quot;English National Opera&quot;,
            &quot;St Martin&#39;s Lane&quot;
          ],
          &quot;postcode&quot;: &quot;WC2N 4ES&quot;
        }
      }
    }
  ],
  &quot;status&quot;: {
    &quot;status&quot;: &quot;created&quot;,
    &quot;updatedAt&quot;: &quot;2019-01-02T13:30:00.048Z&quot;
  },
  &quot;createdAt&quot;: &quot;2019-01-02T13:30:00.048Z&quot;,
  &quot;updatedAt&quot;: &quot;2019-01-02T13:30:00.048Z&quot;
}
```</p>
<h2 id='before-you-start'>Before You Start</h2>
<p>Please contact OTD support to set up the following:</p>

<ul>
<li>Account</li>
<li>Service types</li>
<li>Places (optional)</li>
</ul>
<h1 id='job-journey-type'>Job Journey Type</h1>
<p>Each job must have a <code>&lt;order&gt;.&lt;job&gt;.metadata.journeyType</code> defined.  The valid values are:</p>

<table><thead>
<tr>
<th><code>journeyType</code> values</th>
<th>Meaning</th>
</tr>
</thead><tbody>
<tr>
<td><code>delivery</code></td>
<td>The job is a normal delivery job (usually from store to home)</td>
</tr>
<tr>
<td><code>return</code></td>
<td>The job is a return of some products (usually from home to store)</td>
</tr>
</tbody></table>

<blockquote>
<p><strong>Note</strong>: regardless of <code>journeyType</code>, <code>collection</code> is always the pick up location, and <code>delivery</code> is always the drop off location.</p>
</blockquote>
<h1 id='service-type'>Service Type</h1>
<p>A service type defines a set of pre-agreed constraints for orders.  A new user must have the service type set up before they can create orders.</p>

<p>Currently supported service types: <code>timeslot</code>, <code>asap</code>, <code>return</code>, <code>2hour</code>, <code>3hour</code>, <code>4hour</code>, <code>sameday</code>, <code>2hour-later</code>, <code>4hour-later</code>.</p>
<h1 id='place'>Place</h1>
<p>A stop must contain a valid place, which represents a physical location.</p>

<p>The user can either contact OTD support to set up places for them (so they can use a place ID when creating orders), or use a valid address when creating orders.</p>
<h1 id='status'>Status</h1>
<p>Both order and job have status.  They are updated with realtime events.</p>
<h2 id='job-status'>Job Status</h2>
<p>Here is an example job status object.</p>
<pre class="highlight plaintext"><code>"status": {
  "progressStatus": {
    "status": "allocated",
    "updatedAt": "2019-01-02T13:18:53.087Z"
  },
  "courierStatus": {
    "location": {
      "longitude": 0.1701,
      "latitude": 51.5701
    },
    "updatedAt": "2019-01-02T13:18:53.087Z"
  },
  "incidents": [
    {
      "id": "85ad3dd6-05d3-4023-b1e6-74042b7ff138",
      "status": "created",
      "reason": {
        "code": "1B",
        "description": "Partner Cancellation"
      },
      "impact": {
        "code": "7H",
        "description": "Unable to Fulfil Order"
      },
      "createdAt": "2019-01-02T13:18:53.087Z",
      "updatedAt": "2019-01-02T13:18:53.087Z"
    }
  ]
}
</code></pre>
<p>Job status is further divided into the following types.</p>
<h3 id='progress-status'>Progress Status</h3>
<p>Example:
<code>
&quot;progressStatus&quot;: {
  &quot;status&quot;: &quot;allocated&quot;,
  &quot;updatedAt&quot;: &quot;2019-01-02T13:18:53.087Z&quot;
}
</code></p>

<p>Status representing a job&#39;s execution state.</p>

<table><thead>
<tr>
<th>Status</th>
<th>Meaning</th>
</tr>
</thead><tbody>
<tr>
<td><code>created</code></td>
<td>The job was created.</td>
</tr>
<tr>
<td><code>allocated</code></td>
<td>A courier has accepted the job.</td>
</tr>
<tr>
<td><code>arrived_at_collection</code></td>
<td>Courier has arrived at the collection address.</td>
</tr>
<tr>
<td><code>collected</code></td>
<td>Courier has collected the item.</td>
</tr>
<tr>
<td><code>arrived_at_delivery</code></td>
<td>Courier has arrived at the delivery address.</td>
</tr>
<tr>
<td><code>delivered</code></td>
<td>Courier has delivered the item.</td>
</tr>
<tr>
<td><code>cancelled</code></td>
<td>The job has been cancelled (this means the whole order has been cancelled too).</td>
</tr>
<tr>
<td><code>returned_to_depot</code></td>
<td>Courier failed to deliver the item and it has been returned to depot.</td>
</tr>
<tr>
<td><code>offline</code></td>
<td>The job is offline (this means an internal error, please contact OTD support).</td>
</tr>
</tbody></table>
<h3 id='courier-status'>Courier Status</h3>
<p>Example:
<code>
&quot;courierStatus&quot;: {
  &quot;location&quot;: {
    &quot;longitude&quot;: 0.1701,
    &quot;latitude&quot;: 51.5701
  },
  &quot;updatedAt&quot;: &quot;2019-01-02T13:18:53.087Z&quot;
}
</code></p>

<p>This gives the realtime courier location data.</p>
<h3 id='incidents'>Incidents</h3>
<p>Example:
<code>
&quot;incidents&quot;: [
  {
    &quot;id&quot;: &quot;85ad3dd6-05d3-4023-b1e6-74042b7ff138&quot;,
    &quot;status&quot;: &quot;created&quot;,
    &quot;reason&quot;: {
      &quot;code&quot;: &quot;1B&quot;,
      &quot;description&quot;: &quot;Partner Cancellation&quot;
    },
    &quot;impact&quot;: {
      &quot;code&quot;: &quot;7H&quot;,
      &quot;description&quot;: &quot;Unable to Fulfil Order&quot;
    },
    &quot;createdAt&quot;: &quot;2019-01-02T13:18:53.087Z&quot;,
    &quot;updatedAt&quot;: &quot;2019-01-02T13:18:53.087Z&quot;
  }
]
</code></p>

<p>Incidents represents a list of exceptions that happened during the job&#39;s lifetime.</p>

<table><thead>
<tr>
<th>Status</th>
<th>Meaning</th>
</tr>
</thead><tbody>
<tr>
<td><code>created</code></td>
<td>An incident was created for the job.</td>
</tr>
<tr>
<td><code>deleted</code></td>
<td>An incident was deleted from the job.</td>
</tr>
</tbody></table>

<p>TODO: incident codes and meaning</p>
<h2 id='order-status'>Order Status</h2>
<p>Order status is an aggregation of job statuses.</p>

<p>Example:</p>

<table><thead>
<tr>
<th>Job 1 Status</th>
<th>Job 2 Status</th>
<th>Order Status</th>
</tr>
</thead><tbody>
<tr>
<td><code>created</code></td>
<td><code>created</code></td>
<td><code>created</code></td>
</tr>
<tr>
<td><code>allocated</code></td>
<td><code>created</code></td>
<td><code>in_progress</code></td>
</tr>
<tr>
<td><code>delivered</code></td>
<td><code>allocated</code></td>
<td><code>in_progress</code></td>
</tr>
<tr>
<td><code>delivered</code></td>
<td><code>offline</code></td>
<td><code>in_progress</code>, because <code>off_line</code> is not considered completed</td>
</tr>
<tr>
<td><code>allocated</code></td>
<td><code>returned_to_depot</code></td>
<td><code>in_progress</code></td>
</tr>
<tr>
<td><code>delivered</code></td>
<td><code>returned_to_depot</code></td>
<td><code>completed</code></td>
</tr>
<tr>
<td><code>delivered</code></td>
<td><code>delivered</code></td>
<td><code>completed</code></td>
</tr>
<tr>
<td><code>cancelled</code></td>
<td><code>cancelled</code></td>
<td><code>cancelled</code></td>
</tr>
<tr>
<td><code>delivered</code></td>
<td><code>cancelled</code></td>
<td>This never happens</td>
</tr>
<tr>
<td><code>returned_to_depot</code></td>
<td><code>cancelled</code></td>
<td><code>cancelled</code>, this can only happen if customer cancelled the order and then returned to depot was called.</td>
</tr>
</tbody></table>
<h1 id='eta'>ETA</h1>
<p>Example:
<code>
{
  &quot;id&quot;: &quot;myorder&quot;,
  &quot;jobs&quot;: [
    {
      &quot;id&quot;: &quot;job0&quot;,
      //...
      &quot;eta&quot;: {
        &quot;collection&quot;: {
          &quot;courierId&quot;: &quot;mycourier&quot;,
          &quot;time&quot;: &quot;2019-01-30T15:16:17.540Z&quot;
        },
        &quot;delivery&quot;: {
          &quot;courierId&quot;: &quot;mycourier&quot;,
          &quot;time&quot;: &quot;2019-01-30T15:19:27.546Z&quot;
        }
      }
    }
  ],
  //...
}
</code></p>

<p><code>collection</code> shows ETA to collection, <code>delivery</code> shows ETA to delivery.</p>

<p>Note <code>collection</code> is only available after the job has entered state <code>allocated</code>, and <code>delivery</code> is only available after <code>collected</code>.</p>
<h2 id='amend-and-cancellation'>Amend and Cancellation</h2>
<p>Orders and jobs can be amended after they are created, subject to certain conditions:</p>

<ul>
<li>Job&#39;s stop and timing details cannot be amended after it has entered <code>allocated</code> state.</li>
<li>Job&#39;s item details cannot be amended after it has entered <code>collected</code> state.</li>
</ul>

<p>Orders can be cancelled if and only if all of the jobs are in <code>created</code> state.</p>
<h1 id='search'>Search</h1>
<p>Orders can be searched using the search API.  The API supports paging using a <code>length</code> and <code>offset</code> concept.</p>

<p>Please see API for details.</p>
<h1 id='error-codes'>Error Codes</h1>
<p>All error messages have the following format.</p>
<pre class="highlight plaintext"><code>{
  "code": "booking:0203",
  "description": "job not found",
  "message": "more details"
}
</code></pre>
<p>A list of all error codes and HTTP response code.
| full code | http code | description |
| --- | --- | --- |
| default:0000 | 500 | Unknown |
| default:0001 | 400 | Invalid request |
| default:0002 | 404 | Not found |
| booking:0101 | 500 | geocode service failed |
| booking:0102 | 500 | place service failed |
| booking:0103 | 500 | SLA service failed |
| booking:0104 | 500 | job service failed |
| booking:0105 | 500 | chronos service failed |
| booking:0106 | 500 | capacity service failed |
| booking:0107 | 500 | account service failed |
| booking:0108 | 500 | tracking service failed |
| booking:0108 | 500 | capacity service (zone API) failed |
| booking:0202 | 422 | invalid place. please create a support ticket to configure your account with otd |
| booking:0203 | 422 | invalid SLA. please create a support ticket to configure your account with otd |
| booking:0206 | 422 | invalid timeslot. please create a support ticket to configure your account with otd |
| booking:0207 | 422 | invalid capacity. please create a support ticket to configure your account with otd |
| booking:0208 | 422 | invalid account. please create a support ticket to configure your account with otd |
| booking:0210 | 422 | invalid zone. please create a support ticket to configure your account with otd |
| booking:0301 | 422 | order not cancellable |
| booking:0302 | 409 | concurrent modification |
| booking:0303 | 500 | failed to delete job |
| booking:0304 | 400 | order not amendable |
| booking:02XX | 500 | unknown server error with On the dot services |
| booking:401 | 401 | Invalid authentication credentials |
| booking:403 | 403 | Permission denied to access resource |</p>
<h1 id='advanced-features'>Advanced Features</h1><h2 id='timeslots'>Timeslots</h2>
<blockquote>
<p>Note: this feature only works if you have places configured in OTD.  Please contact OTD support to set them up.</p>
</blockquote>

<p>Users might want to get a list of available timeslots for their delivery, and then choose the ones they like.</p>

<p>This is implemented by a timeslot API.  Here is an example request:</p>
<pre class="highlight plaintext"><code>POST https://TODO/v2/accounts/myaccount/timeslots

{
  "serviceType": "timeslot",
  "collection": {
    "id": "myplace"
  },
  "delivery": {
    "address": {
      "streets": [
        "Royal Opera House",
        "Bow Street"
      ],
      "town": "London",
      "country": "GBR",
      "postcode": "WC2E 9DD"
    }
  },
  "packageReadyAt": "2019-01-30T16:25:00.000Z",
  "additionalNoOfDays": 0 // TODO this is not yet changed, since we don't have time to implement it
}
</code></pre>
<p>And here is an example response:
<code>
{
  &quot;chronos&quot;: {
    &quot;2019-01-30&quot;: [
      {
        &quot;id&quot;: &quot;YTZkOWNjN2QtMWJkNS00MDkyLWFiZGItNGM4YmM0OWJkMDBlfjRwdkVNMEdrY3p3RDdQbWNCYWJOd2t0ck5ua2FtMX5FQzJBKzRQSH5XQzJFKzlERH4xNTQ4ODYzNTEzfjE1NDg4NjQwNjB+MH4wfjQuOTEyMDAwfnRpbWVzbG90fmZhbHNlfmZhbHNl&quot;,
        &quot;collectionSlot&quot;: {
          &quot;collectFrom&quot;: &quot;2019-01-30T16:25:00.619Z&quot;,
          &quot;collectBy&quot;: &quot;2019-01-30T16:25:00.619Z&quot;
        },
        &quot;deliverySlot&quot;: {
          &quot;deliverFrom&quot;: &quot;2019-01-30T16:40:00.619Z&quot;,
          &quot;deliverBy&quot;: &quot;2019-01-30T16:40:00.619Z&quot;
        },
        &quot;slotExpiresAt&quot;: &quot;2019-01-30T16:01:00.000Z&quot;
      },
      {
        &quot;id&quot;: &quot;YTZkOWNjN2QtMWJkNS00MDkyLWFiZGItNGM4YmM0OWJkMDBlfjhPeGtZNXFuaHdlWExwT2hkMzVNTFJIdjJMbm9OMX5FQzJBKzRQSH5XQzJFKzlERH4xNTQ4ODYzNTEzfjE1NDg4NjQwNjB+MH4wfjQuOTEyMDAwfnRpbWVzbG90fmZhbHNlfmZhbHNl&quot;,
        &quot;collectionSlot&quot;: {
          &quot;collectFrom&quot;: &quot;2019-01-30T16:30:00.619Z&quot;,
          &quot;collectBy&quot;: &quot;2019-01-30T16:30:00.619Z&quot;
        },
        &quot;deliverySlot&quot;: {
          &quot;deliverFrom&quot;: &quot;2019-01-30T16:45:00.619Z&quot;,
          &quot;deliverBy&quot;: &quot;2019-01-30T16:45:00.619Z&quot;
        },
        &quot;slotExpiresAt&quot;: &quot;2019-01-30T16:01:00.000Z&quot;
      },
      //...
    ]
  }
}
</code></p>

<p>The user should use the <code>id</code> value in create order API as <code>&lt;order&gt;.&lt;job&gt;.timeslot.id</code>.</p>

<blockquote>
<p>Note: please ensure to use the same addresses for timeslot.</p>
</blockquote>
<h2 id='helpers'>Helpers</h2>
<p>Jobs can have helper jobs attached to them.  A helper is a new job that is associated with a target item group/job, and shares the the same parameters (timing, stops, etc).</p>

<p>Helper jobs are created by specifying in the parent job the number of helpers required.</p>

<p>The limit of helpers per job is 10.</p>

<blockquote>
<p>Note: helper jobs cannot be amended</p>
</blockquote>
<h3 id='helpers-and-status'>Helpers and Status</h3>
<p>Helper jobs have the same set of statuses as a normal job, but they <strong>do not</strong> contribute to order status.</p>

<p><strong>Version:</strong> 2.0</p>

<p><a href="https://github.com/Rebilly/generator-openapi-repo">Find out how to create Github repo for your OpenAPI spec.</a></p>
<h1 id='authentication'>Authentication</h1>
<table><thead>
<tr>
<th>apiKey</th>
<th><em>API Key</em></th>
</tr>
</thead><tbody>
</tbody></table>
<h1 id='v2-accounts-accountid-timeslots'>/V2/ACCOUNTS/{ACCOUNTID}/TIMESLOTS</h1><h2 id='post'><strong><em>POST</em></strong></h2>
<p><strong>Summary:</strong> Get available timeslots for a booking</p>

<p><strong>Description:</strong> This API returns a list of available timeslots. Allows the options to be
presented to an end-user for selection.</p>
<h3 id='http-request'>HTTP Request</h3>
<p><code>***POST*** /v2/accounts/{accountId}/timeslots</code></p>

<p><strong>Parameters</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Located in</th>
<th>Description</th>
<th>Required</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>accountId</td>
<td>path</td>
<td>account ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>body</td>
<td>body</td>
<td>Chronos parameters</td>
<td>Yes</td>
<td></td>
</tr>
</tbody></table>

<p><strong>Responses</strong></p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>400</td>
<td>Bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
</tbody></table>
<h1 id='v2-accounts-accountid-orders'>/V2/ACCOUNTS/{ACCOUNTID}/ORDERS</h1><h2 id='post-2'><strong><em>POST</em></strong></h2>
<p><strong>Summary:</strong> Create order</p>

<p><strong>Description:</strong> This API creates an order with the specified ID.</p>

<p>This API allows the caller to override all values (timeslots, stops) with their own values.</p>

<p>If the caller sends only timeslot ID or place ID, then the relevant services will be called to get the details.</p>
<h3 id='http-request-2'>HTTP Request</h3>
<p><code>***POST*** /v2/accounts/{accountId}/orders</code></p>

<p><strong>Parameters</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Located in</th>
<th>Description</th>
<th>Required</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>accountId</td>
<td>path</td>
<td>account ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>body</td>
<td>body</td>
<td>Order object that needs to be created</td>
<td>Yes</td>
<td></td>
</tr>
</tbody></table>

<p><strong>Responses</strong></p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>400</td>
<td>Bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
<tr>
<td>409</td>
<td>Conflict</td>
</tr>
</tbody></table>
<h1 id='v2-accounts-accountid-orders-orderid'>/V2/ACCOUNTS/{ACCOUNTID}/ORDERS/{ORDERID}</h1><h2 id='get'><strong><em>GET</em></strong></h2>
<p><strong>Summary:</strong> Get order</p>

<p><strong>Description:</strong> This API gets order with account ID and order ID.</p>
<h3 id='http-request-3'>HTTP Request</h3>
<p><code>***GET*** /v2/accounts/{accountId}/orders/{orderId}</code></p>

<p><strong>Parameters</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Located in</th>
<th>Description</th>
<th>Required</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>accountId</td>
<td>path</td>
<td>account ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>orderId</td>
<td>path</td>
<td>order ID</td>
<td>Yes</td>
<td>string</td>
</tr>
</tbody></table>

<p><strong>Responses</strong></p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>400</td>
<td>Bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
<tr>
<td>404</td>
<td>Not found</td>
</tr>
</tbody></table>
<h1 id='v2-accounts-accountid-orders-search'>/V2/ACCOUNTS/{ACCOUNTID}/ORDERS/SEARCH</h1><h2 id='post-3'><strong><em>POST</em></strong></h2>
<p><strong>Summary:</strong> Search order</p>

<p><strong>Description:</strong> This API returns a list of orders based on the provided search criteria.</p>

<p><code>createdAt</code>, <code>collectedBy</code> and <code>deliveredBy</code> are time ranges.  If there are multiple jobs in the order, then any job satisfying these will cause the order to be returned.</p>

<p><code>coordinates</code> can be any point on Earth.</p>

<p>Paging is supported.  See request and response for details.</p>
<h3 id='http-request-4'>HTTP Request</h3>
<p><code>***POST*** /v2/accounts/{accountId}/orders/search</code></p>

<p><strong>Parameters</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Located in</th>
<th>Description</th>
<th>Required</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>accountId</td>
<td>path</td>
<td>account ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>body</td>
<td>body</td>
<td>The search order parameters</td>
<td>Yes</td>
<td></td>
</tr>
</tbody></table>

<p><strong>Responses</strong></p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>400</td>
<td>Bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
</tbody></table>
<h1 id='v2-accounts-accountid-orders-orderid-cancel'>/V2/ACCOUNTS/{ACCOUNTID}/ORDERS/{ORDERID}/CANCEL</h1><h2 id='put'><strong><em>PUT</em></strong></h2>
<p><strong>Summary:</strong> Cancel order</p>

<p><strong>Description:</strong> This API can be used to cancel an order, under the following conditions:</p>

<ol>
<li><p>The order exists.</p></li>
<li><p>None of the jobs of the order have the status <code>collected</code> yet.</p></li>
</ol>

<p>Once an order is cancelled, it cannot be re-created or un-cancelled.  You will need to create a new order in this case.</p>
<h3 id='http-request-5'>HTTP Request</h3>
<p><code>***PUT*** /v2/accounts/{accountId}/orders/{orderId}/cancel</code></p>

<p><strong>Parameters</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Located in</th>
<th>Description</th>
<th>Required</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>accountId</td>
<td>path</td>
<td>account ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>orderId</td>
<td>path</td>
<td>order ID</td>
<td>Yes</td>
<td>string</td>
</tr>
</tbody></table>

<p><strong>Responses</strong></p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>400</td>
<td>Bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
</tr>
</tbody></table>
<h1 id='v2-accounts-accountid-orders-orderid-amend'>/V2/ACCOUNTS/{ACCOUNTID}/ORDERS/{ORDERID}/AMEND</h1><h2 id='put-2'><strong><em>PUT</em></strong></h2>
<p><strong>Summary:</strong> Amend order</p>

<p><strong>Description:</strong> This API amends an order and updates the corresponding jobs in COSMO.</p>

<p>The following rules apply:</p>

<ol>
<li><p>The order must already exist.</p></li>
<li><p>For each job of the order:</p></li>
</ol>

<p>1) If only <code>items</code> is updated, then the job&#39;s progress status must be one of <code>created</code>, <code>allocated</code>, <code>arrived_at_collection</code> (i.e., amending is not allowed after collection).</p>

<p>2) If any other field is changed (including <code>timeslot</code>, <code>metadata</code>), then the job&#39;s progress status must be <code>created</code> (i.e., amending is not allowed after allocation).</p>

<p>3) Collection and delivery stop IDs cannot be changed.</p>

<p>4) If stops corresponding to the job are changed, then rule 2) applies.</p>

<p>Note <code>customData</code> uses incremental update.  All other fields are full-replacement update.</p>
<h3 id='http-request-6'>HTTP Request</h3>
<p><code>***PUT*** /v2/accounts/{accountId}/orders/{orderId}/amend</code></p>

<p><strong>Parameters</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Located in</th>
<th>Description</th>
<th>Required</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>accountId</td>
<td>path</td>
<td>account ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>orderId</td>
<td>path</td>
<td>order ID</td>
<td>Yes</td>
<td>string</td>
</tr>
<tr>
<td>body</td>
<td>body</td>
<td>The cancel order parameters</td>
<td>Yes</td>
<td></td>
</tr>
</tbody></table>

<p><strong>Responses</strong></p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200</td>
<td>OK</td>
</tr>
<tr>
<td>400</td>
<td>Bad request</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
</tr>
<tr>
<td>422</td>
<td>Unprocessable Entity</td>
</tr>
</tbody></table>

<!-- Converted with the swagger-to-slate https://github.com/lavkumarv/swagger-to-slate -->
